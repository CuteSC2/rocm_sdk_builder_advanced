From 3419e5959fe33318fe79c1eb4ceff6ac6a1ee762 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Fri, 24 May 2024 16:03:37 -0700
Subject: [PATCH 6/6] composable kernel patches to support additional gpus

- gfx1010
- gfx1031
- gfx1032
- gfx1035
- gfx1036
- gfx1103

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 cmake/external/composable_kernel.cmake        |   2 +-
 ...RD_DWORD-support-for-not-listed-gpus.patch |  26 ++
 ...0-1035-1036-and-1103-initial-support.patch |  93 ++++++
 .../0003-Fix_Clang_Build.patch.patch          | 218 ++++++++++++++
 .../composable_kernel_patches_combined.patch  | 274 ++++++++++++++++++
 5 files changed, 612 insertions(+), 1 deletion(-)
 create mode 100644 cmake/patches/composable_kernel/0001-by-default-no-3RD_DWORD-support-for-not-listed-gpus.patch
 create mode 100644 cmake/patches/composable_kernel/0002-gfx1010-1035-1036-and-1103-initial-support.patch
 create mode 100644 cmake/patches/composable_kernel/0003-Fix_Clang_Build.patch.patch
 create mode 100644 cmake/patches/composable_kernel/composable_kernel_patches_combined.patch

diff --git a/cmake/external/composable_kernel.cmake b/cmake/external/composable_kernel.cmake
index 4230eb8f42..9e2366c98f 100644
--- a/cmake/external/composable_kernel.cmake
+++ b/cmake/external/composable_kernel.cmake
@@ -1,4 +1,4 @@
-set(PATCH ${PROJECT_SOURCE_DIR}/patches/composable_kernel/Fix_Clang_Build.patch)
+set(PATCH ${PROJECT_SOURCE_DIR}/patches/composable_kernel/composable_kernel_patches_combined.patch)
 
 include(FetchContent)
 FetchContent_Declare(composable_kernel
diff --git a/cmake/patches/composable_kernel/0001-by-default-no-3RD_DWORD-support-for-not-listed-gpus.patch b/cmake/patches/composable_kernel/0001-by-default-no-3RD_DWORD-support-for-not-listed-gpus.patch
new file mode 100644
index 0000000000..20e4f77756
--- /dev/null
+++ b/cmake/patches/composable_kernel/0001-by-default-no-3RD_DWORD-support-for-not-listed-gpus.patch
@@ -0,0 +1,26 @@
+From 87d981e1e702ddb562933692a83dcdcbf41a2f7b Mon Sep 17 00:00:00 2001
+From: Mika Laitio <lamikr@gmail.com>
+Date: Tue, 19 Dec 2023 15:16:58 -0800
+Subject: [PATCH 1/3] by default no 3RD_DWORD support for not listed gpus
+
+Signed-off-by: Mika Laitio <lamikr@gmail.com>
+---
+ include/ck/ck.hpp | 2 ++
+ 1 file changed, 2 insertions(+)
+
+diff --git a/include/ck/ck.hpp b/include/ck/ck.hpp
+index 55f562061..1cc309116 100644
+--- a/include/ck/ck.hpp
++++ b/include/ck/ck.hpp
+@@ -79,6 +79,8 @@ CK_DECLARE_ENV_VAR_BOOL(CK_LOGGING)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31014000
+ #elif defined(__gfx11__)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31004000
++#else
++#define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #endif
+ 
+ // FMA instruction
+-- 
+2.41.1
+
diff --git a/cmake/patches/composable_kernel/0002-gfx1010-1035-1036-and-1103-initial-support.patch b/cmake/patches/composable_kernel/0002-gfx1010-1035-1036-and-1103-initial-support.patch
new file mode 100644
index 0000000000..b69895c7b1
--- /dev/null
+++ b/cmake/patches/composable_kernel/0002-gfx1010-1035-1036-and-1103-initial-support.patch
@@ -0,0 +1,93 @@
+From c15e9d331e080c755e3c8aeb3b65bd99fe81aada Mon Sep 17 00:00:00 2001
+From: Mika Laitio <lamikr@gmail.com>
+Date: Fri, 24 May 2024 03:50:43 -0700
+Subject: [PATCH 2/3] gfx1010/1035/1036 and 1103 initial support
+
+Signed-off-by: Mika Laitio <lamikr@gmail.com>
+---
+ CMakeLists.txt                          |  6 +++---
+ include/ck/ck.hpp                       |  7 ++++++-
+ include/ck/host_utility/device_prop.hpp | 12 ++++++++++++
+ 3 files changed, 21 insertions(+), 4 deletions(-)
+
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index c23746e7f..6b129af31 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -112,7 +112,7 @@ message("checking which targets are supported")
+ #Setting GPU_TARGETS on command line will override this list
+ if(NOT PROFILER_ONLY)
+     rocm_check_target_ids(DEFAULT_GPU_TARGETS
+-        TARGETS "gfx908;gfx90a;gfx940;gfx941;gfx942;gfx1030;gfx1100;gfx1101;gfx1102")
++        TARGETS "gfx908;gfx90a;gfx940;gfx941;gfx942;gfx1010;gfx1030;gfx1031;gfx1032;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102;gfx1103")
+ else()
+     add_definitions(-DPROFILER_ONLY)
+     set(GPU_TARGETS "" CACHE STRING "" FORCE)
+@@ -124,9 +124,9 @@ else()
+     elseif(GPU_ARCH MATCHES "gfx94")
+         rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx940;gfx941;gfx942")
+     elseif(GPU_ARCH MATCHES "gfx10")
+-        rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx1030")
++        rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx1010;gfx1030;gfx1031;gfx1032;gfx1035;gfx1036")
+     elseif(GPU_ARCH MATCHES "gfx11")
+-        rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx1100;gfx1101;gfx1102")
++        rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx1100;gfx1101;gfx1102;gfx1103")
+     else()
+         message(FATAL_ERROR "For PROFILE_ONLY build, please specify GPU_ARCH as gfx90, gfx94, gfx10, or gfx11")
+     endif()
+diff --git a/include/ck/ck.hpp b/include/ck/ck.hpp
+index 1cc309116..97299c84d 100644
+--- a/include/ck/ck.hpp
++++ b/include/ck/ck.hpp
+@@ -75,7 +75,7 @@ CK_DECLARE_ENV_VAR_BOOL(CK_LOGGING)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #elif defined(__gfx803__) || defined(__gfx900__) || defined(__gfx906__) || defined(__gfx9__)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x00020000
+-#elif defined(__gfx103__)
++#elif defined(__gfx101__) || defined(__gfx103__)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31014000
+ #elif defined(__gfx11__)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31004000
+@@ -83,10 +83,15 @@ CK_DECLARE_ENV_VAR_BOOL(CK_LOGGING)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #endif
+ 
++// whether to use assembly or rely on compiler for these instructions
++// TODO: rdna1/gfx1010 has CK_USE_AMD_V_FMAC_F32 but not CK_USE_AMD_V_DOT2_F32_F16 CK_USE_AMD_V_DOT4_I32_I8
++// TODO: check defined(__gfx1035__)
+ // FMA instruction
+ #ifndef __HIP_DEVICE_COMPILE__                   // for host code, define nothing
+ #elif defined(__gfx803__) || defined(__gfx900__) // for GPU code
+ #define CK_USE_AMD_V_MAC_F32
++#elif defined(__gfx101__)
++#define CK_USE_AMD_V_FMAC_F32
+ #elif defined(__gfx906__) || defined(__gfx9__) || defined(__gfx103__) // for GPU code
+ #define CK_USE_AMD_V_FMAC_F32
+ #define CK_USE_AMD_V_DOT2_F32_F16
+diff --git a/include/ck/host_utility/device_prop.hpp b/include/ck/host_utility/device_prop.hpp
+index 116bb3ea0..a02ae8e39 100644
+--- a/include/ck/host_utility/device_prop.hpp
++++ b/include/ck/host_utility/device_prop.hpp
+@@ -40,7 +40,19 @@ inline std::string get_device_name()
+         {"gfx804", "gfx803"},
+         {"Vega10", "gfx900"},
+         {"gfx901", "gfx900"},
++        {"navi10", "gfx1010"},
++        {"navi12", "gfx1011"},
++        {"navi14", "gfx1012"},
+         {"10.3.0 Sienna_Cichlid 18", "gfx1030"},
++        {"navi22", "gfx1031"},
++        {"navi23", "gfx1032"},
++        {"navi24", "gfx1034"},
++        {"rembrandt", "gfx1035"},
++        {"raphael", "gfx1036"},
++        {"navi31", "gfx1100"},
++        {"navi32", "gfx1101"},
++        {"navi33", "gfx1102"},
++        {"phoenix", "gfx1103"},
+     };
+ 
+     const auto name = raw_name.substr(0, raw_name.find(':')); // str.substr(0, npos) returns str.
+-- 
+2.41.1
+
diff --git a/cmake/patches/composable_kernel/0003-Fix_Clang_Build.patch.patch b/cmake/patches/composable_kernel/0003-Fix_Clang_Build.patch.patch
new file mode 100644
index 0000000000..54cde7f880
--- /dev/null
+++ b/cmake/patches/composable_kernel/0003-Fix_Clang_Build.patch.patch
@@ -0,0 +1,218 @@
+From 154edca548830221212e3afe6d8d05e0fe958b16 Mon Sep 17 00:00:00 2001
+From: Mika Laitio <lamikr@gmail.com>
+Date: Fri, 26 Jul 2024 09:43:14 -0700
+Subject: [PATCH 3/3] Fix_Clang_Build.patch
+
+Signed-off-by: Mika Laitio <lamikr@gmail.com>
+---
+ CMakeLists.txt                                | 39 +------------------
+ example/ck_tile/01_fmha/generate.py           |  2 +-
+ include/ck/host_utility/hip_check_error.hpp   | 20 ++++------
+ .../core/utility/transpose_vectors.hpp        |  7 +++-
+ include/ck_tile/host/hip_check_error.hpp      | 21 ++++------
+ .../gpu/CMakeLists.txt                        |  6 +++
+ 6 files changed, 29 insertions(+), 66 deletions(-)
+
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 6b129af31..a1fffbf47 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -23,10 +23,10 @@ endif()
+ 
+ set(version 1.1.0)
+ # Check support for CUDA/HIP in Cmake
+-project(composable_kernel VERSION ${version} LANGUAGES CXX)
++project(composable_kernel VERSION ${version} LANGUAGES CXX HIP)
+ include(CTest)
+ 
+-find_package(Python3 3.6 COMPONENTS Interpreter REQUIRED)
++find_package(Python3 COMPONENTS Interpreter REQUIRED)
+ 
+ list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
+ 
+@@ -227,27 +227,6 @@ set(CMAKE_CXX_STANDARD_REQUIRED ON)
+ set(CMAKE_CXX_EXTENSIONS OFF)
+ message("CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
+ 
+-## OpenMP
+-if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+-	# workaround issue hipcc in rocm3.5 cannot find openmp
+-	set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
+-	set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
+-	set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
+-	set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-	set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-	set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-else()
+-	find_package(OpenMP REQUIRED)
+-endif()
+-
+-message("OpenMP_CXX_LIB_NAMES: ${OpenMP_CXX_LIB_NAMES}")
+-message("OpenMP_gomp_LIBRARY: ${OpenMP_gomp_LIBRARY}")
+-message("OpenMP_pthread_LIBRARY: ${OpenMP_pthread_LIBRARY}")
+-message("OpenMP_CXX_FLAGS: ${OpenMP_CXX_FLAGS}")
+-
+-link_libraries(${OpenMP_gomp_LIBRARY})
+-link_libraries(${OpenMP_pthread_LIBRARY})
+-
+ ## HIP
+ find_package(HIP REQUIRED)
+ # Override HIP version in config.h, if necessary.
+@@ -269,12 +248,6 @@ if( DEFINED CK_OVERRIDE_HIP_VERSION_PATCH )
+     message(STATUS "CK_HIP_VERSION_PATCH overriden with ${CK_OVERRIDE_HIP_VERSION_PATCH}")
+ endif()
+ message(STATUS "Build with HIP ${HIP_VERSION}")
+-link_libraries(hip::device)
+-if(CK_hip_VERSION VERSION_GREATER_EQUAL 6.0.23494)
+-    add_compile_definitions(__HIP_PLATFORM_AMD__=1)
+-else()
+-    add_compile_definitions(__HIP_PLATFORM_HCC__=1)
+-endif()
+ 
+ ## tidy
+ include(EnableCompilerWarnings)
+@@ -541,11 +514,3 @@ rocm_install(FILES
+ 
+ set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
+ set(CPACK_RPM_PACKAGE_LICENSE "MIT")
+-
+-rocm_create_package(
+-    NAME composablekernel
+-    DESCRIPTION "High Performance Composable Kernel for AMD GPUs"
+-    MAINTAINER "MIOpen Kernels Dev Team <dl.MIOpen@amd.com>"
+-    LDCONFIG
+-    HEADER_ONLY
+-)
+diff --git a/example/ck_tile/01_fmha/generate.py b/example/ck_tile/01_fmha/generate.py
+index 51fecd07b..5ed371995 100644
+--- a/example/ck_tile/01_fmha/generate.py
++++ b/example/ck_tile/01_fmha/generate.py
+@@ -566,7 +566,7 @@ def write_blobs(output_dir : Optional[str], kernel_filter : Optional[str], recei
+ def list_blobs(output_file : Optional[str], kernel_filter : Optional[str], receipt, mask_impl) -> None:
+     assert output_file is not None
+     file_path = Path(output_file)
+-    with file_path.open('a') as f:
++    with file_path.open('w') as f:
+         _, kernels = get_blobs(kernel_filter, receipt, mask_impl)
+         for kernel in kernels:
+             f.write(str(file_path.parent / GEN_DIR / kernel.filename) + "\n")
+diff --git a/include/ck/host_utility/hip_check_error.hpp b/include/ck/host_utility/hip_check_error.hpp
+index c0894f1d7..559481fee 100644
+--- a/include/ck/host_utility/hip_check_error.hpp
++++ b/include/ck/host_utility/hip_check_error.hpp
+@@ -6,19 +6,7 @@
+ #include <sstream>
+ #include <hip/hip_runtime.h>
+ 
+-// To be removed, which really does not tell the location of failed HIP functional call
+-inline void hip_check_error(hipError_t x)
+-{
+-    if(x != hipSuccess)
+-    {
+-        std::ostringstream ss;
+-        ss << "HIP runtime error: " << hipGetErrorString(x) << ". "
+-           << "hip_check_error.hpp"
+-           << ": " << __LINE__ << "in function: " << __func__;
+-        throw std::runtime_error(ss.str());
+-    }
+-}
+-
++#ifndef HIP_CHECK_ERROR
+ #define HIP_CHECK_ERROR(retval_or_funcall)                                 \
+     do                                                                     \
+     {                                                                      \
+@@ -32,3 +20,9 @@ inline void hip_check_error(hipError_t x)
+             throw std::runtime_error(ostr.str());                          \
+         }                                                                  \
+     } while(0)
++#endif
++
++#ifndef hip_check_error
++#define hip_check_error HIP_CHECK_ERROR
++#endif
++
+diff --git a/include/ck_tile/core/utility/transpose_vectors.hpp b/include/ck_tile/core/utility/transpose_vectors.hpp
+index a164c3f94..293ead89a 100644
+--- a/include/ck_tile/core/utility/transpose_vectors.hpp
++++ b/include/ck_tile/core/utility/transpose_vectors.hpp
+@@ -11,6 +11,9 @@
+ 
+ namespace ck_tile {
+ 
++template <typename... Ts>
++constexpr bool always_false = false;
++
+ // S: scalar type (or it can be non-scalar type)
+ // NX: # of vector before transpose
+ // NY: # of vector after transpose
+@@ -117,9 +120,11 @@ struct transpose_vectors
+         }
+         else
+         {
+-            static_assert(false, "not implemented");
++            static_assert(always_false<S_, number<NX>, number<NY>>, "not implemented");
+         }
+     }
+ };
+ 
++
+ } // namespace ck_tile
++
+diff --git a/include/ck_tile/host/hip_check_error.hpp b/include/ck_tile/host/hip_check_error.hpp
+index 3acdb4d87..cc26e184f 100644
+--- a/include/ck_tile/host/hip_check_error.hpp
++++ b/include/ck_tile/host/hip_check_error.hpp
+@@ -8,20 +8,7 @@
+ #include <stdexcept>
+ #include <hip/hip_runtime.h>
+ 
+-namespace ck_tile {
+-// To be removed, which really does not tell the location of failed HIP functional call
+-CK_TILE_HOST void hip_check_error(hipError_t x)
+-{
+-    if(x != hipSuccess)
+-    {
+-        std::ostringstream ss;
+-        ss << "HIP runtime error: " << hipGetErrorString(x) << ". " << __FILE__ << ": " << __LINE__
+-           << "in function: " << __func__;
+-        throw std::runtime_error(ss.str());
+-    }
+-}
+-} // namespace ck_tile
+-
++#ifndef HIP_CHECK_ERROR
+ #define HIP_CHECK_ERROR(retval_or_funcall)                                         \
+     do                                                                             \
+     {                                                                              \
+@@ -34,3 +21,9 @@ CK_TILE_HOST void hip_check_error(hipError_t x)
+             throw std::runtime_error(ostr.str());                                  \
+         }                                                                          \
+     } while(0)
++#endif
++
++#ifndef hip_check_error
++#define hip_check_error HIP_CHECK_ERROR
++#endif
++
+diff --git a/library/src/tensor_operation_instance/gpu/CMakeLists.txt b/library/src/tensor_operation_instance/gpu/CMakeLists.txt
+index c035e7e56..8c5f36d2e 100644
+--- a/library/src/tensor_operation_instance/gpu/CMakeLists.txt
++++ b/library/src/tensor_operation_instance/gpu/CMakeLists.txt
+@@ -59,8 +59,14 @@ function(add_instance_library INSTANCE_NAME)
+     endforeach()
+     #only continue if there are some source files left on the list
+     if(ARGN)
++        set_source_files_properties(${ARGN} PROPERTIES LANGUAGE HIP)
+         add_library(${INSTANCE_NAME} OBJECT ${ARGN})
++        # Always disable debug symbol and C debug assert due to
++        # - Linker error: ... relocation truncated to fit ..., caused by object files to be linked are too huge.
++        # - https://github.com/ROCmSoftwarePlatform/composable_kernel/issues/622
++        target_compile_options(${INSTANCE_NAME} PRIVATE -g0 -DNDEBUG)
+         target_compile_features(${INSTANCE_NAME} PUBLIC)
++        target_compile_definitions(${INSTANCE_NAME} PRIVATE "__HIP_PLATFORM_AMD__=1" "__HIP_PLATFORM_HCC__=1")
+         set_target_properties(${INSTANCE_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
+         clang_tidy_check(${INSTANCE_NAME})
+         set(result 0)
+-- 
+2.41.1
+
diff --git a/cmake/patches/composable_kernel/composable_kernel_patches_combined.patch b/cmake/patches/composable_kernel/composable_kernel_patches_combined.patch
new file mode 100644
index 0000000000..2888ebb970
--- /dev/null
+++ b/cmake/patches/composable_kernel/composable_kernel_patches_combined.patch
@@ -0,0 +1,274 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index c23746e7f..a1fffbf47 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -23,10 +23,10 @@ endif()
+ 
+ set(version 1.1.0)
+ # Check support for CUDA/HIP in Cmake
+-project(composable_kernel VERSION ${version} LANGUAGES CXX)
++project(composable_kernel VERSION ${version} LANGUAGES CXX HIP)
+ include(CTest)
+ 
+-find_package(Python3 3.6 COMPONENTS Interpreter REQUIRED)
++find_package(Python3 COMPONENTS Interpreter REQUIRED)
+ 
+ list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
+ 
+@@ -112,7 +112,7 @@ message("checking which targets are supported")
+ #Setting GPU_TARGETS on command line will override this list
+ if(NOT PROFILER_ONLY)
+     rocm_check_target_ids(DEFAULT_GPU_TARGETS
+-        TARGETS "gfx908;gfx90a;gfx940;gfx941;gfx942;gfx1030;gfx1100;gfx1101;gfx1102")
++        TARGETS "gfx908;gfx90a;gfx940;gfx941;gfx942;gfx1010;gfx1030;gfx1031;gfx1032;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102;gfx1103")
+ else()
+     add_definitions(-DPROFILER_ONLY)
+     set(GPU_TARGETS "" CACHE STRING "" FORCE)
+@@ -124,9 +124,9 @@ else()
+     elseif(GPU_ARCH MATCHES "gfx94")
+         rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx940;gfx941;gfx942")
+     elseif(GPU_ARCH MATCHES "gfx10")
+-        rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx1030")
++        rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx1010;gfx1030;gfx1031;gfx1032;gfx1035;gfx1036")
+     elseif(GPU_ARCH MATCHES "gfx11")
+-        rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx1100;gfx1101;gfx1102")
++        rocm_check_target_ids(DEFAULT_GPU_TARGETS TARGETS "gfx1100;gfx1101;gfx1102;gfx1103")
+     else()
+         message(FATAL_ERROR "For PROFILE_ONLY build, please specify GPU_ARCH as gfx90, gfx94, gfx10, or gfx11")
+     endif()
+@@ -227,27 +227,6 @@ set(CMAKE_CXX_STANDARD_REQUIRED ON)
+ set(CMAKE_CXX_EXTENSIONS OFF)
+ message("CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
+ 
+-## OpenMP
+-if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+-	# workaround issue hipcc in rocm3.5 cannot find openmp
+-	set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
+-	set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
+-	set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
+-	set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-	set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-	set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
+-else()
+-	find_package(OpenMP REQUIRED)
+-endif()
+-
+-message("OpenMP_CXX_LIB_NAMES: ${OpenMP_CXX_LIB_NAMES}")
+-message("OpenMP_gomp_LIBRARY: ${OpenMP_gomp_LIBRARY}")
+-message("OpenMP_pthread_LIBRARY: ${OpenMP_pthread_LIBRARY}")
+-message("OpenMP_CXX_FLAGS: ${OpenMP_CXX_FLAGS}")
+-
+-link_libraries(${OpenMP_gomp_LIBRARY})
+-link_libraries(${OpenMP_pthread_LIBRARY})
+-
+ ## HIP
+ find_package(HIP REQUIRED)
+ # Override HIP version in config.h, if necessary.
+@@ -269,12 +248,6 @@ if( DEFINED CK_OVERRIDE_HIP_VERSION_PATCH )
+     message(STATUS "CK_HIP_VERSION_PATCH overriden with ${CK_OVERRIDE_HIP_VERSION_PATCH}")
+ endif()
+ message(STATUS "Build with HIP ${HIP_VERSION}")
+-link_libraries(hip::device)
+-if(CK_hip_VERSION VERSION_GREATER_EQUAL 6.0.23494)
+-    add_compile_definitions(__HIP_PLATFORM_AMD__=1)
+-else()
+-    add_compile_definitions(__HIP_PLATFORM_HCC__=1)
+-endif()
+ 
+ ## tidy
+ include(EnableCompilerWarnings)
+@@ -541,11 +514,3 @@ rocm_install(FILES
+ 
+ set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
+ set(CPACK_RPM_PACKAGE_LICENSE "MIT")
+-
+-rocm_create_package(
+-    NAME composablekernel
+-    DESCRIPTION "High Performance Composable Kernel for AMD GPUs"
+-    MAINTAINER "MIOpen Kernels Dev Team <dl.MIOpen@amd.com>"
+-    LDCONFIG
+-    HEADER_ONLY
+-)
+diff --git a/example/ck_tile/01_fmha/generate.py b/example/ck_tile/01_fmha/generate.py
+index 51fecd07b..5ed371995 100644
+--- a/example/ck_tile/01_fmha/generate.py
++++ b/example/ck_tile/01_fmha/generate.py
+@@ -566,7 +566,7 @@ def write_blobs(output_dir : Optional[str], kernel_filter : Optional[str], recei
+ def list_blobs(output_file : Optional[str], kernel_filter : Optional[str], receipt, mask_impl) -> None:
+     assert output_file is not None
+     file_path = Path(output_file)
+-    with file_path.open('a') as f:
++    with file_path.open('w') as f:
+         _, kernels = get_blobs(kernel_filter, receipt, mask_impl)
+         for kernel in kernels:
+             f.write(str(file_path.parent / GEN_DIR / kernel.filename) + "\n")
+diff --git a/include/ck/ck.hpp b/include/ck/ck.hpp
+index 55f562061..97299c84d 100644
+--- a/include/ck/ck.hpp
++++ b/include/ck/ck.hpp
+@@ -75,16 +75,23 @@ CK_DECLARE_ENV_VAR_BOOL(CK_LOGGING)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #elif defined(__gfx803__) || defined(__gfx900__) || defined(__gfx906__) || defined(__gfx9__)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x00020000
+-#elif defined(__gfx103__)
++#elif defined(__gfx101__) || defined(__gfx103__)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31014000
+ #elif defined(__gfx11__)
+ #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31004000
++#else
++#define CK_BUFFER_RESOURCE_3RD_DWORD -1
+ #endif
+ 
++// whether to use assembly or rely on compiler for these instructions
++// TODO: rdna1/gfx1010 has CK_USE_AMD_V_FMAC_F32 but not CK_USE_AMD_V_DOT2_F32_F16 CK_USE_AMD_V_DOT4_I32_I8
++// TODO: check defined(__gfx1035__)
+ // FMA instruction
+ #ifndef __HIP_DEVICE_COMPILE__                   // for host code, define nothing
+ #elif defined(__gfx803__) || defined(__gfx900__) // for GPU code
+ #define CK_USE_AMD_V_MAC_F32
++#elif defined(__gfx101__)
++#define CK_USE_AMD_V_FMAC_F32
+ #elif defined(__gfx906__) || defined(__gfx9__) || defined(__gfx103__) // for GPU code
+ #define CK_USE_AMD_V_FMAC_F32
+ #define CK_USE_AMD_V_DOT2_F32_F16
+diff --git a/include/ck/host_utility/device_prop.hpp b/include/ck/host_utility/device_prop.hpp
+index 116bb3ea0..a02ae8e39 100644
+--- a/include/ck/host_utility/device_prop.hpp
++++ b/include/ck/host_utility/device_prop.hpp
+@@ -40,7 +40,19 @@ inline std::string get_device_name()
+         {"gfx804", "gfx803"},
+         {"Vega10", "gfx900"},
+         {"gfx901", "gfx900"},
++        {"navi10", "gfx1010"},
++        {"navi12", "gfx1011"},
++        {"navi14", "gfx1012"},
+         {"10.3.0 Sienna_Cichlid 18", "gfx1030"},
++        {"navi22", "gfx1031"},
++        {"navi23", "gfx1032"},
++        {"navi24", "gfx1034"},
++        {"rembrandt", "gfx1035"},
++        {"raphael", "gfx1036"},
++        {"navi31", "gfx1100"},
++        {"navi32", "gfx1101"},
++        {"navi33", "gfx1102"},
++        {"phoenix", "gfx1103"},
+     };
+ 
+     const auto name = raw_name.substr(0, raw_name.find(':')); // str.substr(0, npos) returns str.
+diff --git a/include/ck/host_utility/hip_check_error.hpp b/include/ck/host_utility/hip_check_error.hpp
+index c0894f1d7..559481fee 100644
+--- a/include/ck/host_utility/hip_check_error.hpp
++++ b/include/ck/host_utility/hip_check_error.hpp
+@@ -6,19 +6,7 @@
+ #include <sstream>
+ #include <hip/hip_runtime.h>
+ 
+-// To be removed, which really does not tell the location of failed HIP functional call
+-inline void hip_check_error(hipError_t x)
+-{
+-    if(x != hipSuccess)
+-    {
+-        std::ostringstream ss;
+-        ss << "HIP runtime error: " << hipGetErrorString(x) << ". "
+-           << "hip_check_error.hpp"
+-           << ": " << __LINE__ << "in function: " << __func__;
+-        throw std::runtime_error(ss.str());
+-    }
+-}
+-
++#ifndef HIP_CHECK_ERROR
+ #define HIP_CHECK_ERROR(retval_or_funcall)                                 \
+     do                                                                     \
+     {                                                                      \
+@@ -32,3 +20,9 @@ inline void hip_check_error(hipError_t x)
+             throw std::runtime_error(ostr.str());                          \
+         }                                                                  \
+     } while(0)
++#endif
++
++#ifndef hip_check_error
++#define hip_check_error HIP_CHECK_ERROR
++#endif
++
+diff --git a/include/ck_tile/core/utility/transpose_vectors.hpp b/include/ck_tile/core/utility/transpose_vectors.hpp
+index a164c3f94..293ead89a 100644
+--- a/include/ck_tile/core/utility/transpose_vectors.hpp
++++ b/include/ck_tile/core/utility/transpose_vectors.hpp
+@@ -11,6 +11,9 @@
+ 
+ namespace ck_tile {
+ 
++template <typename... Ts>
++constexpr bool always_false = false;
++
+ // S: scalar type (or it can be non-scalar type)
+ // NX: # of vector before transpose
+ // NY: # of vector after transpose
+@@ -117,9 +120,11 @@ struct transpose_vectors
+         }
+         else
+         {
+-            static_assert(false, "not implemented");
++            static_assert(always_false<S_, number<NX>, number<NY>>, "not implemented");
+         }
+     }
+ };
+ 
++
+ } // namespace ck_tile
++
+diff --git a/include/ck_tile/host/hip_check_error.hpp b/include/ck_tile/host/hip_check_error.hpp
+index 3acdb4d87..cc26e184f 100644
+--- a/include/ck_tile/host/hip_check_error.hpp
++++ b/include/ck_tile/host/hip_check_error.hpp
+@@ -8,20 +8,7 @@
+ #include <stdexcept>
+ #include <hip/hip_runtime.h>
+ 
+-namespace ck_tile {
+-// To be removed, which really does not tell the location of failed HIP functional call
+-CK_TILE_HOST void hip_check_error(hipError_t x)
+-{
+-    if(x != hipSuccess)
+-    {
+-        std::ostringstream ss;
+-        ss << "HIP runtime error: " << hipGetErrorString(x) << ". " << __FILE__ << ": " << __LINE__
+-           << "in function: " << __func__;
+-        throw std::runtime_error(ss.str());
+-    }
+-}
+-} // namespace ck_tile
+-
++#ifndef HIP_CHECK_ERROR
+ #define HIP_CHECK_ERROR(retval_or_funcall)                                         \
+     do                                                                             \
+     {                                                                              \
+@@ -34,3 +21,9 @@ CK_TILE_HOST void hip_check_error(hipError_t x)
+             throw std::runtime_error(ostr.str());                                  \
+         }                                                                          \
+     } while(0)
++#endif
++
++#ifndef hip_check_error
++#define hip_check_error HIP_CHECK_ERROR
++#endif
++
+diff --git a/library/src/tensor_operation_instance/gpu/CMakeLists.txt b/library/src/tensor_operation_instance/gpu/CMakeLists.txt
+index c035e7e56..8c5f36d2e 100644
+--- a/library/src/tensor_operation_instance/gpu/CMakeLists.txt
++++ b/library/src/tensor_operation_instance/gpu/CMakeLists.txt
+@@ -59,8 +59,14 @@ function(add_instance_library INSTANCE_NAME)
+     endforeach()
+     #only continue if there are some source files left on the list
+     if(ARGN)
++        set_source_files_properties(${ARGN} PROPERTIES LANGUAGE HIP)
+         add_library(${INSTANCE_NAME} OBJECT ${ARGN})
++        # Always disable debug symbol and C debug assert due to
++        # - Linker error: ... relocation truncated to fit ..., caused by object files to be linked are too huge.
++        # - https://github.com/ROCmSoftwarePlatform/composable_kernel/issues/622
++        target_compile_options(${INSTANCE_NAME} PRIVATE -g0 -DNDEBUG)
+         target_compile_features(${INSTANCE_NAME} PUBLIC)
++        target_compile_definitions(${INSTANCE_NAME} PRIVATE "__HIP_PLATFORM_AMD__=1" "__HIP_PLATFORM_HCC__=1")
+         set_target_properties(${INSTANCE_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
+         clang_tidy_check(${INSTANCE_NAME})
+         set(result 0)
-- 
2.41.1

