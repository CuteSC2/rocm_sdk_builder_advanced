From 16ae886bfd408ff65e6935b26cd25452ad6cfeb2 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@pilppa.org>
Date: Fri, 10 May 2024 17:05:37 -0700
Subject: [PATCH 1/4] remove hardcoding from rocm and llvm home dirs

- rocm home dir is checked from the
  CMAKE_INSTALL_PREFIX instead of hardcoding
  it to /opt/rocm both in aotriton and triton
- llvm dir is checked by the existence of files
  to be either rocm_dir/bin or rocm_dir/llvm/bin
  instead of hardcoding it to rocm_dir/llvm/bin
- pass the required new parameters also to compiler_generator,
  compiler and Makefiles

Signed-off-by: Mika Laitio <lamikr@pilppa.org>
---
 CMakeLists.txt                                | 29 +++++++++++++++++--
 csrc/CMakeLists.txt                           |  2 +-
 python/generate.py                            |  4 ++-
 .../.github/workflows/amd-offline-tests.yml   |  6 ++--
 third_party/triton/CMakeLists.txt             | 22 ++++++++++++--
 .../lib/Target/HSACO/HSACOTranslation.cpp     |  5 ++++
 third_party/triton/python/setup.py            | 21 ++++++++++++++
 .../triton/third_party/hip/CMakeLists.txt     |  2 +-
 .../hip/lib/Target/HSACO/HSACOTranslation.cpp |  6 ++++
 third_party/triton/scripts/amd/lld.sh         |  2 +-
 .../triton/scripts/amd/setup_rocm_libs.sh     | 15 +++++++---
 v2python/compile.py                           |  6 ++--
 v2python/generate_compile.py                  |  7 ++++-
 v2src/CMakeLists.txt                          |  5 ++--
 14 files changed, 111 insertions(+), 21 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fbc4717..81cc290 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,7 +18,27 @@ option(AOTRITON_NO_SHARED "Disable shared object build. Incompatible with AOTRIT
 option(AOTRITON_NO_PYTHON "Disable python binding build" OFF)
 option(AOTRITON_ENABLE_ASAN "Enable Address Sanitizer. Implies -g" OFF)
 set(TARGET_GPUS "MI200;MI300X" CACHE STRING "Target Architecture (Note here uses Trade names)")
-set(AMDHSA_LD_PRELOAD "/opt/rocm/lib/libhsa-runtime64.so" CACHE STRING "Workaround of libamdhip64.so.5: undefined symbol: hsa_amd_memory_async_copy_on_engine")
+if(EXISTS "${CMAKE_INSTALL_PREFIX}/lib64/libhsa-runtime64.so")
+    set(AMDHSA_LD_PRELOAD "${CMAKE_INSTALL_PREFIX}/lib64/libhsa-runtime64.so" CACHE STRING "Workaround of libamdhip64.so.5: undefined symbol: hsa_amd_memory_async_copy_on_engine")
+else()
+    set(AMDHSA_LD_PRELOAD "${CMAKE_INSTALL_PREFIX}/lib/libhsa-runtime64.so" CACHE STRING "Workaround of libamdhip64.so.5: undefined symbol: hsa_amd_memory_async_copy_on_engine")
+endif()
+
+if(EXISTS "${CMAKE_INSTALL_PREFIX}/llvm/bin/llvm-objcopy")
+    set(LLVM_PREFIX_PATH "${CMAKE_INSTALL_PREFIX}/llvm" CACHE STRING "llvm compiler toolchain location dir prefix")
+else()
+    set(LLVM_PREFIX_PATH "${CMAKE_INSTALL_PREFIX}" CACHE STRING "llvm compiler toolchain location dir prefix")
+endif()
+
+option(TRITON_USE_ROCM "Enable build for ROCm" OFF)
+option(ROCM_DEFAULT_DIR "ROCM_SDK_BUILD_DIR" "/opt/rocm")
+option(MLIR_ENABLE_DUMP "Enable MLIR_DUMP" 0)
+option(LLVM_IR_ENABLE_DUMP "Enable LLVM_IR_DUMP" 0)
+option(AMDGCN_ENABLE_DUMP "Enable AMDGCN_DUMP" 0)
+
+set(AMDGPU_TARGETS "${DEFAULT_AMDGPU_TARGETS}" CACHE STRING "List of specific machine types for library to target")
+
+message(STATUS "TRITON_USE_ROCM: ${TRITON_USE_ROCM} MLIR_ENABLE_DUMP: ${MLIR_ENABLE_DUMP} LLVM_IR_ENABLE_DUMP: ${LLVM_IR_ENABLE_DUMP} AMDGCN_ENABLE_DUMP: ${AMDGCN_ENABLE_DUMP} target GPUS: ${TARGET_GPUS}")
 
 # GPU kernel compression related options
 option(AOTRITON_COMPRESS_KERNEL "Enable GPU kernel compression with zstd. Fail when zstd is unavailable. Only effective for AOTriton API V2" ON)
@@ -51,7 +71,7 @@ if(AOTRITON_COMPRESS_KERNEL)
     endif()
 endif()
 
-set(AOTRITON_EXTRA_COMPILER_OPTIONS "-I/opt/rocm/include/ ")
+set(AOTRITON_EXTRA_COMPILER_OPTIONS "-I${CMAKE_INSTALL_PREFIX}/include/ ")
 if(AOTRITON_ENABLE_ASAN)
     set(AOTRITON_EXTRA_COMPILER_OPTIONS "${AOTRITON_EXTRA_COMPILER_OPTIONS} -g -fsanitize=address -fno-omit-frame-pointer")
     set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${AOTRITON_EXTRA_COMPILER_OPTIONS}")
@@ -83,10 +103,13 @@ add_custom_target(aotriton_venv_req
   BYPRODUCTS "${VENV_DIR}/bin/pytest"
 )
 
+#TRITON_USE_ROCM=${TRITON_USE_ROCM} ROCM_DEFAULT_DIR=${ROCM_DEFAULT_DIR} MLIR_ENABLE_DUMP=${MLIR_ENABLE_DUMP} LLVM_IR_ENABLE_DUMP=${LLVM_IR_ENABLE_DUMP} AMDGCN_ENABLE_DUMP=${AMDGCN_ENABLE_DUMP}
+#"-DTRITON_USE_ROCM=${TRITON_USE_ROCM} -DROCM_DEFAULT_DIR=${ROCM_DEFAULT_DIR}"
+
 set(TRITON_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/triton_build")
 execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "${TRITON_BUILD_DIR}")
 add_custom_target(aotriton_venv_triton
-  COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} PATH="${VENV_DIR}/bin:$ENV{PATH}" TRITON_BUILD_DIR=${TRITON_BUILD_DIR} python setup.py develop
+  COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} PATH="${VENV_DIR}/bin:$ENV{PATH}" TRITON_USE_ROCM=${TRITON_USE_ROCM} ROCM_DEFAULT_DIR=${ROCM_DEFAULT_DIR} MLIR_ENABLE_DUMP=${MLIR_ENABLE_DUMP} LLVM_IR_ENABLE_DUMP=${LLVM_IR_ENABLE_DUMP} AMDGCN_ENABLE_DUMP=${AMDGCN_ENABLE_DUMP} TRITON_BUILD_DIR=${TRITON_BUILD_DIR} python setup.py develop
   # COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} python -m pip show triton
   WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/third_party/triton/python/"
   BYPRODUCTS "${VENV_SITE}/triton/_C/libtriton.so"
diff --git a/csrc/CMakeLists.txt b/csrc/CMakeLists.txt
index 1210ec8..7258c7d 100644
--- a/csrc/CMakeLists.txt
+++ b/csrc/CMakeLists.txt
@@ -8,7 +8,7 @@ set(AOTRITON_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}")
 execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "${AOTRITON_BUILD_DIR}")
 
 add_custom_target(aotriton_v1_gen_compile
-  COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} PATH="${VENV_DIR}/bin:$ENV{PATH}" python python/generate.py --target ${TARGET_GPUS} --build_dir "${AOTRITON_BUILD_DIR}"
+  COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} PATH="${VENV_DIR}/bin:$ENV{PATH}" python python/generate.py --target ${TARGET_GPUS} --build_dir "${AOTRITON_BUILD_DIR}" --libhsa_runtime64 "${AMDHSA_LD_PRELOAD}"
   WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
   BYPRODUCTS "${AOTRITON_BUILD_DIR}/Makefile.compile"
 )
diff --git a/python/generate.py b/python/generate.py
index 29c3526..6a94121 100644
--- a/python/generate.py
+++ b/python/generate.py
@@ -15,6 +15,7 @@ def parse():
     p.add_argument("--target", type=str, default=None, help="Ahead of Time (AOT) Compile Architecture. PyTorch is required for autodetection if --target is missing.")
     p.add_argument("--build_dir", type=str, default='build/', help="build directory")
     p.add_argument("--python", type=str, default=None, help="python binary to run compile.py")
+    p.add_argument("--libhsa_runtime64", type=str, default='/opt/rocm_sdk/lib/libhsa-runtime64.so', help="libhsa_runtime64.so location")
     args = p.parse_args()
     # print(args)
     return args
@@ -47,8 +48,9 @@ def gen_from_kernel(args, k, p, makefile):
 def main():
     args = parse()
     build_dir = Path(args.build_dir)
+    libhsa_runtime64 = args.libhsa_runtime64
     with open(build_dir / 'Makefile.compile', 'w') as f:
-        print('LIBHSA_RUNTIME64=/opt/rocm/lib/libhsa-runtime64.so\n', file=f)
+        print('LIBHSA_RUNTIME64=' + libhsa_runtime64 + '\n', file=f)
         makefile_content = io.StringIO()
         per_kernel_targets = []
         for k in rules.kernels:
diff --git a/third_party/triton/.github/workflows/amd-offline-tests.yml b/third_party/triton/.github/workflows/amd-offline-tests.yml
index fd87f8f..c73f6a9 100644
--- a/third_party/triton/.github/workflows/amd-offline-tests.yml
+++ b/third_party/triton/.github/workflows/amd-offline-tests.yml
@@ -36,10 +36,10 @@ jobs:
           apt-get install -y ./amdgpu-install_5.5.50500-1_all.deb
           amdgpu-install -y --usecase=rocm --no-dkms
           # remove unused packages to free some disk space
-          cp /opt/rocm/llvm/bin/ld.lld .
+          cp /opt/rocm_sdk_612/bin/ld.lld .
           apt purge -y rocblas rocm-llvm
-          mkdir -p /opt/rocm/llvm/bin
-          mv ld.lld /opt/rocm/llvm/bin/ld.lld
+          mkdir -p /opt/rocm_sdk_612/bin
+          mv ld.lld /opt/rocm_sdk_612/bin/ld.lld
           # install pytorch
           pip3 install torch==2.0.1 --index-url https://download.pytorch.org/whl/rocm5.4.2
           # uninstall system triton to eliminate conflicts with testing version
diff --git a/third_party/triton/CMakeLists.txt b/third_party/triton/CMakeLists.txt
index 55a5d8b..9f8db33 100644
--- a/third_party/triton/CMakeLists.txt
+++ b/third_party/triton/CMakeLists.txt
@@ -34,10 +34,20 @@ option(TRITON_BUILD_PYTHON_MODULE "Build Python Triton bindings" OFF)
 set(TRITON_CODEGEN_BACKENDS "" CACHE STRING "Enable different codegen backends")
 
 # Force TRITON_USE_ROCM for ROCm support
-set(TRITON_USE_ROCM ON)
-set(ROCM_DEFAULT_DIR "/opt/rocm")
+option(TRITON_USE_ROCM "Enable build for ROCm" ON)
+option(ROCM_DEFAULT_DIR "ROCM_SDK_BUILD_DIR" "/opt/rocm")
+option(MLIR_ENABLE_DUMP "Enable MLIR_DUMP" 0)
+option(LLVM_IR_ENABLE_DUMP "Enable LLVM_IR_DUMP" 0)
+option(AMDGCN_ENABLE_DUMP "Enable AMDGCN_DUMP" 0)
+
 add_definitions( -DROCM_DEFAULT_DIR="${ROCM_DEFAULT_DIR}")
 
+message(STATUS "TRITON_USE_ROCM: ${TRITON_USE_ROCM}")
+message(STATUS "ROCM_DEFAULT_DIR: ${ROCM_DEFAULT_DIR}")
+message(STATUS "MLIR_ENABLE_DUMP: ${MLIR_ENABLE_DUMP}")
+message(STATUS "LLVM_IR_ENABLE_DUMP: ${LLVM_IR_ENABLE_DUMP}")
+message(STATUS "AMDGCN_ENABLE_DUMP: ${AMDGCN_ENABLE_DUMP}")
+
 # Ensure Python3 vars are set correctly
 # used conditionally in this file and by lit tests
 
@@ -211,6 +221,14 @@ if(EXISTS "$ENV{ROCM_PATH}/lib/libhsa-runtime64.so" )
   set(ROCM_LIBRARIES
     "$ENV{ROCM_PATH}/lib/libhsa-runtime64.so"
   )
+elseif(EXISTS "$ENV{ROCM_PATH}/lib64/libhsa-runtime64.so" )
+  set(ROCM_LIBRARIES
+    "$ENV{ROCM_PATH}/lib64/libhsa-runtime64.so"
+  )
+elseif(EXISTS "${ROCM_DEFAULT_DIR}/lib64/libhsa-runtime64.so" )
+  set(ROCM_LIBRARIES
+    "${ROCM_DEFAULT_DIR}/lib64/libhsa-runtime64.so"
+  )
 elseif(EXISTS "${ROCM_DEFAULT_DIR}/lib/libhsa-runtime64.so" )
   set(ROCM_LIBRARIES
     "${ROCM_DEFAULT_DIR}/lib/libhsa-runtime64.so"
diff --git a/third_party/triton/lib/Target/HSACO/HSACOTranslation.cpp b/third_party/triton/lib/Target/HSACO/HSACOTranslation.cpp
index e6d36ad..4e5845b 100644
--- a/third_party/triton/lib/Target/HSACO/HSACOTranslation.cpp
+++ b/third_party/triton/lib/Target/HSACO/HSACOTranslation.cpp
@@ -234,6 +234,11 @@ std::string generate_hsaco(llvm::Module *module, const std::string &triple,
                                               "triton" / "third_party" /
                                               "hip" / "llvm" / "bin" / "ld.lld";
   std::string lld_path = compiletime_path.string();
+  if (!std::filesystem::exists(lld_path)) {
+    std::string rocm_path = ::triton::tools::getenv("ROCM_PATH");
+    lld_path = (rocm_path.empty()) ? ROCM_DEFAULT_DIR : rocm_path;
+    lld_path += "/bin/ld.lld";
+  }
   if (!std::filesystem::exists(lld_path)) {
     std::string rocm_path = ::triton::tools::getenv("ROCM_PATH");
     lld_path = (rocm_path.empty()) ? ROCM_DEFAULT_DIR : rocm_path;
diff --git a/third_party/triton/python/setup.py b/third_party/triton/python/setup.py
index 55425ad..02a0ccd 100644
--- a/third_party/triton/python/setup.py
+++ b/third_party/triton/python/setup.py
@@ -256,6 +256,27 @@ class CMakeBuild(build_ext):
             "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON",
             "-DPYTHON_INCLUDE_DIRS=" + python_include_dir,
         ]
+        triton_use_rocm = os.getenv('TRITON_USE_ROCM')
+        if triton_use_rocm is None:
+            triton_use_rocm=OFF
+        cmake_args.append("-DTRITON_USE_ROCM=" + triton_use_rocm)
+        rocm_default_dir = os.getenv('ROCM_DEFAULT_DIR')
+        if rocm_default_dir is None:
+            rocm_default_dir="/opt/rocm"
+        cmake_args.append("-DROCM_DEFAULT_DIR=" + rocm_default_dir)
+        mlir_enable_dump = os.getenv('MLIR_ENABLE_DUMP')
+        if mlir_enable_dump is None:
+            mlir_enable_dump="0"
+        cmake_args.append("-DMLIR_ENABLE_DUMP=" + mlir_enable_dump)
+        llvm_ir_enable_dump = os.getenv('LLVM_IR_ENABLE_DUMP')
+        if llvm_ir_enable_dump is None:
+            llvm_ir_enable_dump="0"
+        cmake_args.append("-DLLVM_IR_ENABLE_DUMP=" + llvm_ir_enable_dump)
+        amdgcn_enable_dump = os.getenv('AMDGCN_ENABLE_DUMP')
+        if amdgcn_enable_dump is None:
+            amdgcn_enable_dump="0"
+        cmake_args.append("-DAMDGCN_ENABLE_DUMP=" + amdgcn_enable_dump)
+
         if lit_dir is not None:
             cmake_args.append("-DLLVM_EXTERNAL_LIT=" + lit_dir)
         cmake_args.extend(thirdparty_cmake_args)
diff --git a/third_party/triton/python/triton/third_party/hip/CMakeLists.txt b/third_party/triton/python/triton/third_party/hip/CMakeLists.txt
index 1c5977f..9c2f6e1 100644
--- a/third_party/triton/python/triton/third_party/hip/CMakeLists.txt
+++ b/third_party/triton/python/triton/third_party/hip/CMakeLists.txt
@@ -106,4 +106,4 @@ if(TRITON_BUILD_PYTHON_MODULE)
         DEPENDS ${HIP_BACKEND_PY_STAMP}
         COMMENT "Checking and applying modifications to hip_backend.py"
     )
-endif()
\ No newline at end of file
+endif()
diff --git a/third_party/triton/python/triton/third_party/hip/lib/Target/HSACO/HSACOTranslation.cpp b/third_party/triton/python/triton/third_party/hip/lib/Target/HSACO/HSACOTranslation.cpp
index bbeb5a2..fdd4b91 100644
--- a/third_party/triton/python/triton/third_party/hip/lib/Target/HSACO/HSACOTranslation.cpp
+++ b/third_party/triton/python/triton/third_party/hip/lib/Target/HSACO/HSACOTranslation.cpp
@@ -219,6 +219,12 @@ std::string generate_hsaco(llvm::Module *module, const std::string &triple,
                                               "triton" / "third_party" /
                                               "hip" / "llvm" / "bin" / "ld.lld";
   std::string lld_path = compiletime_path.string();
+  if (!std::filesystem::exists(lld_path)) {
+    std::string rocm_path = ::triton::tools::getenv("ROCM_PATH");
+    // auto ROCM_DEFAULT_DIR = "/opt/rocm";
+    lld_path = (rocm_path.empty()) ? ROCM_DEFAULT_DIR : rocm_path;
+    lld_path += "/bin/ld.lld";
+  }
   if (!std::filesystem::exists(lld_path)) {
     std::string rocm_path = ::triton::tools::getenv("ROCM_PATH");
     // auto ROCM_DEFAULT_DIR = "/opt/rocm";
diff --git a/third_party/triton/scripts/amd/lld.sh b/third_party/triton/scripts/amd/lld.sh
index fd78d62..93e860b 100644
--- a/third_party/triton/scripts/amd/lld.sh
+++ b/third_party/triton/scripts/amd/lld.sh
@@ -1 +1 @@
-${ROCM_PATH}/llvm/bin/ld.lld -flavor gnu -shared _empty.o -o _empty.hsaco
+${ROCM_PATH}/bin/ld.lld -flavor gnu -shared _empty.o -o _empty.hsaco
diff --git a/third_party/triton/scripts/amd/setup_rocm_libs.sh b/third_party/triton/scripts/amd/setup_rocm_libs.sh
index 60eaa30..4552390 100755
--- a/third_party/triton/scripts/amd/setup_rocm_libs.sh
+++ b/third_party/triton/scripts/amd/setup_rocm_libs.sh
@@ -4,7 +4,7 @@ set -ex
 
 # Set ROCM_HOME if not set
 if [[ -z "${ROCM_HOME}" ]]; then
-    export ROCM_HOME=/opt/rocm
+    export ROCM_HOME=/opt/rocm_sdk_612
 fi
 
 # Check TRITON_ROCM_DIR is set
@@ -69,6 +69,13 @@ done
 cp -r $ROCM_HOME/include $TRITON_ROCM_DIR/
 
 # Copy linker
-mkdir -p $TRITON_ROCM_DIR/llvm/bin
-cp $ROCM_HOME/llvm/bin/ld.lld $TRITON_ROCM_DIR/llvm/bin/
-
+mkdir -p $TRITON_ROCM_DIR/bin
+if [ -f $ROCM_HOME/llvm/bin/ld.lld ]; then
+    cp $ROCM_HOME/llvm/bin/ld.lld $TRITON_ROCM_DIR/bin/
+else
+    if [ -f $ROCM_HOME/bin/ld.lld ]; then
+        cp $ROCM_HOME/bin/ld.lld $TRITON_ROCM_DIR/bin/
+    else
+        echo "Error, $ROCM_HOME/bin/ld.lld not found"
+    fi
+fi
diff --git a/v2python/compile.py b/v2python/compile.py
index cad0e38..c1ce11e 100755
--- a/v2python/compile.py
+++ b/v2python/compile.py
@@ -33,11 +33,14 @@ def main():
     parser.add_argument("--grid", "-g", type=str, help="Launch grid of the kernel", required=True)
     parser.add_argument("--verbose", "-v", help="Enable vebose output", action='store_true')
     parser.add_argument("--nostrip", help="Keep debugging symbols", action='store_true')
+    parser.add_argument("--llvm_prefix_path", type=str, default='/opt/rocm/llvm', help="llvm compiler toolchain location dir prefix")
     args = parser.parse_args()
 
     out_path = args.out_path
     out_path = out_path.with_suffix('')
 
+    llvm_prefix_path = args.llvm_prefix_path
+
     # execute python sources and extract functions wrapped in JITFunction
     arg_path = Path(args.path)
     sys.path.insert(0, str(arg_path.parent))
@@ -125,8 +128,7 @@ def main():
         if args.nostrip:
             shutil.copy(hsaco_path, out_path.with_suffix('.hsaco'))
         else:
-            subprocess.run(['/opt/rocm/llvm/bin/llvm-objcopy', '--remove-section', '.debug_*', str(hsaco_path), str(out_path.with_suffix('.hsaco'))])
-
+            subprocess.run([llvm_prefix_path + '/bin/llvm-objcopy', '--remove-section', '.debug_*', str(hsaco_path), str(out_path.with_suffix('.hsaco'))])
     with out_path.with_suffix('.json').open("w") as fp:
         json.dump(ccinfo.metadata, fp, indent=2)
 
diff --git a/v2python/generate_compile.py b/v2python/generate_compile.py
index 8117e5d..5143f97 100644
--- a/v2python/generate_compile.py
+++ b/v2python/generate_compile.py
@@ -19,6 +19,8 @@ def parse():
     p.add_argument("--build_dir", type=str, default='build/', help="build directory")
     p.add_argument("--python", type=str, default=None, help="python binary to run compile.py")
     p.add_argument("--enable_zstd", type=str, default=None, help="Use zstd to compress the compiled kernel")
+    p.add_argument("--libhsa_runtime64", type=str, default='/opt/rocm_sdk/lib/libhsa-runtime64.so', help="libhsa_runtime64.so location")
+    p.add_argument("--llvm_prefix_path", type=str, default='/opt/rocm/llvm', help="llvm compiler toolchain location dir prefix")
     # p.add_argument("--autotune_data", type=str, default=None, help="Autotune results generated by tune_flash.py")
     args = p.parse_args()
     # print(args)
@@ -26,10 +28,12 @@ def parse():
 
 def gen_from_object(args, o : 'ObjectFileDescription', makefile):
     target_fn = f'{o.KERNEL_FAMILY}/gpu_kernel_image.{o.SHIM_KERNEL_NAME}/{o._hsaco_kernel_path.name}'
+    llvm_prefix_path = args.llvm_prefix_path
     print('#', o.human_readable_signature, file=makefile)
     print(target_fn, ':', o.src.absolute(), COMPILER.absolute(), file=makefile)
     cmd  = f'LD_PRELOAD=$(LIBHSA_RUNTIME64) {COMPILER} {o.src.absolute()} --kernel_name {o.entrance} -o {o.obj.absolute()}'
     cmd += f' -g 1,1,1 --num_warps {o.num_warps} --num_stages {o.num_stages} --waves_per_eu {o.waves_per_eu}'
+    cmd += f' --llvm_prefix_path {llvm_prefix_path}'
     if o.target_gpu is not None:
         cmd += f" --target '{o.target_gpu}'"
         target_gpu = o.target_gpu
@@ -67,8 +71,9 @@ def gen_from_kernel(args, k, build_dir, makefile):
 def main():
     args = parse()
     build_dir = Path(args.build_dir)
+    libhsa_runtime64 = args.libhsa_runtime64
     with open(build_dir / 'Makefile.compile', 'w') as f:
-        print('LIBHSA_RUNTIME64=/opt/rocm/lib/libhsa-runtime64.so\n', file=f)
+        print('LIBHSA_RUNTIME64=' + libhsa_runtime64 + '\n', file=f)
         makefile_content = io.StringIO()
         per_kernel_targets = []
         for k in triton_kernels:
diff --git a/v2src/CMakeLists.txt b/v2src/CMakeLists.txt
index 6294359..2f8cb66 100644
--- a/v2src/CMakeLists.txt
+++ b/v2src/CMakeLists.txt
@@ -1,6 +1,7 @@
 # Copyright © 2023-2024 Advanced Micro Devices, Inc.
 # SPDX-License-Identifier: MIT
 
+
 message("CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR}")
 message("CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}")
 cmake_path(GET CMAKE_CURRENT_SOURCE_DIR PARENT_PATH CMAKE_CURRENT_SOURCE_PARENT_DIR)
@@ -15,7 +16,7 @@ if(AOTRITON_COMPRESS_KERNEL)
   list(APPEND AOTRITON_GEN_FLAGS "--enable_zstd" "${ZSTD_EXEC}")
 endif(AOTRITON_COMPRESS_KERNEL)
 add_custom_target(aotriton_v2_gen_compile
-  COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} PATH="${VENV_DIR}/bin:$ENV{PATH}" python -m v2python.generate_compile --target_gpus ${TARGET_GPUS} --build_dir "${AOTRITON_V2_BUILD_DIR}" ${AOTRITON_GEN_FLAGS}
+  COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} PATH="${VENV_DIR}/bin:$ENV{PATH}" python -m v2python.generate_compile --target_gpus ${TARGET_GPUS} --build_dir "${AOTRITON_V2_BUILD_DIR}" --libhsa_runtime64 "${AMDHSA_LD_PRELOAD}" --llvm_prefix_path "${LLVM_PREFIX_PATH}" ${AOTRITON_GEN_FLAGS}
   WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_PARENT_DIR}"
   BYPRODUCTS "${AOTRITON_V2_BUILD_DIR}/Makefile.compile"
 )
@@ -33,7 +34,7 @@ endif()
 add_custom_target(aotriton_v2_compile
   # (CAVEAT) KNOWN PROBLEM: Will not work if LD_PRELOAD is not empty
   # FIXME: Change this into `-E env --modify LD_PRELOAD=path_list_prepend:${AMDOCL_LD_PRELOAD}` when minimal cmake >= 3.25
-  COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} PATH="${VENV_DIR}/bin:$ENV{PATH}" make -j ${MAX_JOBS} -f Makefile.compile LIBHSA_RUNTIME64=${AMDHSA_LD_PRELOAD}
+  COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} PATH="${VENV_DIR}/bin:$ENV{PATH}" make -j ${MAX_JOBS} -f Makefile.compile LIBHSA_RUNTIME64=${AMDHSA_LD_PRELOAD} CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
   WORKING_DIRECTORY "${AOTRITON_V2_BUILD_DIR}"
   COMMAND_EXPAND_LISTS
   BYPRODUCTS "${AOTRITON_V2_BUILD_DIR}/flash/attn_fwd.h"
-- 
2.34.1

