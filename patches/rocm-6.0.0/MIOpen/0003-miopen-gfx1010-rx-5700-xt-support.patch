From 67954e59e6ac99e4e52428b1d2c3b8b0c85d5c59 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Sat, 20 Jan 2024 11:03:29 -0800
Subject: [PATCH 3/3] miopen gfx1010/rx 5700 xt support

- detect the gfx1010 devices before compiling the
  cl files and set two build flags:
- disable the and buffer load store usage and fmac_v32 for
  gfx101x devices on implicitgem_util.hpp
- Set the flag CK_AMD_GPU_GFX1010 that is used to set
  gpu kernel loading related parameters
- Set compile time flag MIO_BN_GFX101X when building
  gpu specific code for execution with hsaco
- When MIO_BN_GFX101X is set, the MIOpen uses inline
  versions of reduce functions instead of using the
  assembly versions from gcnAsmBNBwdTrainSpatial.s
- This fixes the error when training a spatial models by
  running the gpu tests from
  https://github.com/lamikr/pytorch-gpu-benchmark.git which gave
  following error:
Benchmarking Training float precision type resnet101
<inline asm>:14:20: error: not a valid operand.
v_add_f32 v4 v4 v4 row_bcast:15 row_mask:0xa
                   ^
<inline asm>:15:20: error: not a valid operand.
v_add_f32 v3 v3 v3 row_bcast:15 row_mask:0xa
                   ^
<inline asm>:17:20: error: not a valid operand.
v_add_f32 v4 v4 v4 row_bcast:31 row_mask:0xc
                   ^
<inline asm>:18:20: error: not a valid operand.
v_add_f32 v3 v3 v3 row_bcast:31 row_mask:0xc
                   ^
MIOpen(HIP): Error [Do] 'amd_comgr_do_action(kind, handle, in.GetHandle(), out.GetHandle())' AMD_COMGR_ACTION_CODEGEN_BC_TO_RELOCATABLE: ERROR (1)
MIOpen(HIP): Error [BuildOcl] comgr status = ERROR (1)
MIOpen(HIP): Warning [BuildOcl] error: cannot compile inline asm

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 .../composable_kernel/include/utility/config.hpp           | 6 +++---
 src/include/miopen/solver/ck_utility_common.hpp            | 3 +++
 src/include/miopen/solver/implicitgemm_util.hpp            | 7 +++++--
 src/kernels/MIOpenBatchNormActivBwdPerAct.cl               | 2 +-
 src/kernels/MIOpenBatchNormActivBwdSpatial.cl              | 2 +-
 src/kernels/MIOpenBatchNormActivFwdTrainSpatial.cl         | 2 +-
 src/kernels/MIOpenBatchNormBwdSpatial.cl                   | 2 +-
 src/kernels/MIOpenBatchNormFwdTrainSpatial.cl              | 2 +-
 src/kernels/batchnorm_functions.h                          | 6 +++++-
 src/solver/batchnorm/backward_per_activation.cpp           | 1 +
 src/solver/batchnorm/backward_per_activation_fused.cpp     | 1 +
 src/solver/batchnorm/backward_spatial_multiple.cpp         | 1 +
 src/solver/batchnorm/backward_spatial_single.cpp           | 1 +
 src/solver/batchnorm/forward_inference.cpp                 | 1 +
 src/solver/batchnorm/forward_per_activation.cpp            | 1 +
 src/solver/batchnorm/forward_per_activation_fused.cpp      | 1 +
 src/solver/batchnorm/forward_spatial_multiple.cpp          | 1 +
 src/solver/batchnorm/forward_spatial_single.cpp            | 1 +
 test/handle_test.cpp                                       | 1 +
 19 files changed, 31 insertions(+), 11 deletions(-)

diff --git a/src/composable_kernel/composable_kernel/include/utility/config.hpp b/src/composable_kernel/composable_kernel/include/utility/config.hpp
index cf89fa618..ae939903c 100644
--- a/src/composable_kernel/composable_kernel/include/utility/config.hpp
+++ b/src/composable_kernel/composable_kernel/include/utility/config.hpp
@@ -14,7 +14,7 @@
 // should enable one and only one GPU target
 #if !(defined(CK_AMD_GPU_GFX803) || defined(CK_AMD_GPU_GFX900) || defined(CK_AMD_GPU_GFX906) ||    \
       defined(CK_AMD_GPU_GFX940) || defined(CK_AMD_GPU_GFX908) || defined(CK_AMD_GPU_GFX90A) ||    \
-      defined(CK_AMD_GPU_GFX941) || defined(CK_AMD_GPU_GFX942) || defined(CK_AMD_GPU_GFX1030) ||   \
+      defined(CK_AMD_GPU_GFX941) || defined(CK_AMD_GPU_GFX942) || defined(CK_AMD_GPU_GFX1010) || defined(CK_AMD_GPU_GFX1030) ||   \
       defined(CK_AMD_GPU_GFX1031) || defined(CK_AMD_GPU_GFX1035) || defined(CK_AMD_GPU_GFX1100) || defined(CK_AMD_GPU_GFX1101) || \
       defined(CK_AMD_GPU_GFX1102))
 #error Need to define (only) one GPU target
@@ -33,7 +33,7 @@
     defined(CK_AMD_GPU_GFX941) || defined(CK_AMD_GPU_GFX942) || defined(CK_AMD_GPU_GFX940) || \
     defined(CK_AMD_GPU_GFX908) || defined(CK_AMD_GPU_GFX90A)
 #define CK_BUFFER_RESOURCE_3RD_DWORD 0x00020000
-#elif defined(CK_AMD_GPU_GFX1030) || defined(CK_AMD_GPU_GFX1031) || defined(CK_AMD_GPU_GFX1035) || defined(CK_AMD_GPU_GFX1100) || \
+#elif defined(CK_AMD_GPU_GFX1010) || defined(CK_AMD_GPU_GFX1030) || defined(CK_AMD_GPU_GFX1031) || defined(CK_AMD_GPU_GFX1035) || defined(CK_AMD_GPU_GFX1100) || \
     defined(CK_AMD_GPU_GFX1101) || defined(CK_AMD_GPU_GFX1102)
 #define CK_BUFFER_RESOURCE_3RD_DWORD 0x31014000
 #endif
@@ -43,7 +43,7 @@
 #define CK_USE_AMD_V_MAC_F32
 #elif defined(CK_AMD_GPU_GFX906) || defined(CK_AMD_GPU_GFX908) || defined(CK_AMD_GPU_GFX90a) ||  \
     defined(CK_AMD_GPU_GFX941) || defined(CK_AMD_GPU_GFX942) || defined(CK_AMD_GPU_GFX940) ||    \
-    defined(CK_AMD_GPU_GFX1030) || defined(CK_AMD_GPU_GFX1031) || defined(CK_AMD_GPU_GFX1035) || defined(CK_AMD_GPU_GFX1100) || \
+    defined(CK_AMD_GPU_GFX1010) || defined(CK_AMD_GPU_GFX1030) || defined(CK_AMD_GPU_GFX1031) || defined(CK_AMD_GPU_GFX1035) || defined(CK_AMD_GPU_GFX1100) || \
     defined(CK_AMD_GPU_GFX1101) || defined(CK_AMD_GPU_GFX1102)
 #define CK_USE_AMD_V_FMAC_F32
 #define CK_USE_AMD_V_DOT2_F32_F16
diff --git a/src/include/miopen/solver/ck_utility_common.hpp b/src/include/miopen/solver/ck_utility_common.hpp
index 989ec8557..96f2fd844 100644
--- a/src/include/miopen/solver/ck_utility_common.hpp
+++ b/src/include/miopen/solver/ck_utility_common.hpp
@@ -56,6 +56,7 @@ static inline bool is_ck_supported_hardware(const Handle& handle)
            StartsWith(handle.GetDeviceName(), "gfx940") ||
            StartsWith(handle.GetDeviceName(), "gfx941") ||
            StartsWith(handle.GetDeviceName(), "gfx942") ||
+           StartsWith(handle.GetDeviceName(), "gfx1010") ||
            StartsWith(handle.GetDeviceName(), "gfx1030") ||
            StartsWith(handle.GetDeviceName(), "gfx1031") ||
            StartsWith(handle.GetDeviceName(), "gfx1035") ||
@@ -105,6 +106,8 @@ static inline auto get_ck_common_compiler_flag(const Handle& handle)
         compiler_flag << " -DCK_AMD_GPU_GFX941";
     else if(StartsWith(device_name, "gfx942"))
         compiler_flag << " -DCK_AMD_GPU_GFX942";
+    else if(StartsWith(device_name, "gfx1010"))
+        compiler_flag << " -DCK_AMD_GPU_GFX1010";
     else if(StartsWith(device_name, "gfx1030"))
         compiler_flag << " -DCK_AMD_GPU_GFX1030";
     else if(StartsWith(device_name, "gfx1031"))
diff --git a/src/include/miopen/solver/implicitgemm_util.hpp b/src/include/miopen/solver/implicitgemm_util.hpp
index d9aad50b9..632664b53 100644
--- a/src/include/miopen/solver/implicitgemm_util.hpp
+++ b/src/include/miopen/solver/implicitgemm_util.hpp
@@ -479,7 +479,9 @@ static inline bool is_use_amd_buffer_load_store(const ExecutionContext& ctx)
 {
 #if WORKAROUND_MIOPEN_ISSUE_557
     const auto device_name = ctx.GetStream().GetDeviceName();
-    return !StartsWith(device_name, "gfx103");
+    // same logic than in reducetensor.cpp
+    if (1 == 1)
+    return !((StartsWith(device_name, "gfx10")) || (StartsWith(device_name, "gfx11")));
 #else
     return true;
 #endif
@@ -488,7 +490,7 @@ static inline bool is_use_amd_buffer_load_store(const ExecutionContext& ctx)
 static inline bool is_use_v_fmac_f32(const ExecutionContext& ctx)
 {
     const auto device_name = ctx.GetStream().GetDeviceName();
-    return StartsWith(device_name, "gfx103");
+    return ((StartsWith(device_name, "gfx101")) || (StartsWith(device_name, "gfx103")));
 }
 
 static inline bool support_amd_buffer_atomic_fadd(const std::string& device_name)
@@ -610,6 +612,7 @@ static inline bool IsComposableKernelSupportedHardware(const ExecutionContext& c
            StartsWith(c.GetStream().GetDeviceName(), "gfx908") ||
            StartsWith(c.GetStream().GetDeviceName(), "gfx90a") ||
            StartsWith(c.GetStream().GetDeviceName(), "gfx94") ||
+           StartsWith(c.GetStream().GetDeviceName(), "gfx101");
            StartsWith(c.GetStream().GetDeviceName(), "gfx103");
 }
 
diff --git a/src/kernels/MIOpenBatchNormActivBwdPerAct.cl b/src/kernels/MIOpenBatchNormActivBwdPerAct.cl
index d9f81232b..81c31acb9 100644
--- a/src/kernels/MIOpenBatchNormActivBwdPerAct.cl
+++ b/src/kernels/MIOpenBatchNormActivBwdPerAct.cl
@@ -34,7 +34,7 @@
 #endif
 
 #define MIOPEN_USE_AMDGCN 0
-#if defined(__AMDGCN__) && !(MIO_BN_GFX103X || MIO_BN_GFX110X)
+#if defined(__AMDGCN__) && !(MIO_BN_GFX101X || MIO_BN_GFX103X || MIO_BN_GFX110X)
 #undef MIOPEN_USE_AMDGCN
 #define MIOPEN_USE_AMDGCN 1
 #endif
diff --git a/src/kernels/MIOpenBatchNormActivBwdSpatial.cl b/src/kernels/MIOpenBatchNormActivBwdSpatial.cl
index c227ed158..5a35ae76a 100644
--- a/src/kernels/MIOpenBatchNormActivBwdSpatial.cl
+++ b/src/kernels/MIOpenBatchNormActivBwdSpatial.cl
@@ -32,7 +32,7 @@
 #endif
 
 #define MIOPEN_USE_AMDGCN 0
-#if defined(__AMDGCN__) && !(MIO_BN_GFX103X || MIO_BN_GFX110X)
+#if defined(__AMDGCN__) && !(MIO_BN_GFX101X || MIO_BN_GFX103X || MIO_BN_GFX110X)
 #undef MIOPEN_USE_AMDGCN
 #define MIOPEN_USE_AMDGCN 1
 #endif
diff --git a/src/kernels/MIOpenBatchNormActivFwdTrainSpatial.cl b/src/kernels/MIOpenBatchNormActivFwdTrainSpatial.cl
index 329a943fd..48bcb3fed 100644
--- a/src/kernels/MIOpenBatchNormActivFwdTrainSpatial.cl
+++ b/src/kernels/MIOpenBatchNormActivFwdTrainSpatial.cl
@@ -33,7 +33,7 @@
 #endif
 
 #define MIOPEN_USE_AMDGCN 0
-#if defined(__AMDGCN__) && !(MIO_BN_GFX103X || MIO_BN_GFX110X)
+#if defined(__AMDGCN__) && !(MIO_BN_GFX101X || MIO_BN_GFX103X || MIO_BN_GFX110X)
 #undef MIOPEN_USE_AMDGCN
 #define MIOPEN_USE_AMDGCN 1
 #endif
diff --git a/src/kernels/MIOpenBatchNormBwdSpatial.cl b/src/kernels/MIOpenBatchNormBwdSpatial.cl
index 23103198a..c4682a3b0 100644
--- a/src/kernels/MIOpenBatchNormBwdSpatial.cl
+++ b/src/kernels/MIOpenBatchNormBwdSpatial.cl
@@ -33,7 +33,7 @@
 #endif
 
 #define MIOPEN_USE_AMDGCN 0
-#if defined(__AMDGCN__) && !(MIO_BN_GFX103X || MIO_BN_GFX110X)
+#if defined(__AMDGCN__) && !(MIO_BN_GFX101X || MIO_BN_GFX103X || MIO_BN_GFX110X)
 #undef MIOPEN_USE_AMDGCN
 #define MIOPEN_USE_AMDGCN 1
 #endif
diff --git a/src/kernels/MIOpenBatchNormFwdTrainSpatial.cl b/src/kernels/MIOpenBatchNormFwdTrainSpatial.cl
index 9eecb6990..1d9f84c94 100644
--- a/src/kernels/MIOpenBatchNormFwdTrainSpatial.cl
+++ b/src/kernels/MIOpenBatchNormFwdTrainSpatial.cl
@@ -33,7 +33,7 @@
 #endif
 
 #define MIOPEN_USE_AMDGCN 0
-#if defined(__AMDGCN__) && !(MIO_BN_GFX103X || MIO_BN_GFX110X)
+#if defined(__AMDGCN__) && !(MIO_BN_GFX101X || MIO_BN_GFX103X || MIO_BN_GFX110X)
 #undef MIOPEN_USE_AMDGCN
 #define MIOPEN_USE_AMDGCN 1
 #endif
diff --git a/src/kernels/batchnorm_functions.h b/src/kernels/batchnorm_functions.h
index 4764324db..a87b471ab 100644
--- a/src/kernels/batchnorm_functions.h
+++ b/src/kernels/batchnorm_functions.h
@@ -133,7 +133,7 @@
 // MIOPEN_USE_AMDGCN may be defined before this header.
 #ifndef MIOPEN_USE_AMDGCN
 #if defined(__AMDGCN__) && \
-    !((defined(MIO_BN_GFX103X) && MIO_BN_GFX103X) || (defined(MIO_BN_GFX110X) && MIO_BN_GFX110X))
+    !((defined(MIO_BN_GFX101X) && MIO_BN_GFX101X) || (defined(MIO_BN_GFX103X) && MIO_BN_GFX103X) || (defined(MIO_BN_GFX110X) && MIO_BN_GFX110X))
 #define MIOPEN_USE_AMDGCN 1
 #else
 #define MIOPEN_USE_AMDGCN 0
@@ -157,6 +157,10 @@
 #define MIO_RUNNING_RESULT 0
 #endif
 
+#ifndef MIO_BN_GFX101X
+#define MIO_BN_GFX101X 0
+#endif
+
 #ifndef MIO_BN_GFX103X
 #define MIO_BN_GFX103X 0
 #endif
diff --git a/src/solver/batchnorm/backward_per_activation.cpp b/src/solver/batchnorm/backward_per_activation.cpp
index 73b80d85c..645157a55 100644
--- a/src/solver/batchnorm/backward_per_activation.cpp
+++ b/src/solver/batchnorm/backward_per_activation.cpp
@@ -112,6 +112,7 @@ BnBwdTrainingPerActivation::GetSolution(const ExecutionContext& context,
             {"MIO_BN_GRP0", xlocalsize},
             {"MIO_BN_GRP1", ylocalsize},
             {"MIO_BN_GRP2", zlocalsize},
+            {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
             {"MIO_BN_GFX110X", (StartsWith(handle.GetDeviceName(), "gfx110") ? "1" : "0")},
             {"MIO_BN_GFX103X", (StartsWith(handle.GetDeviceName(), "gfx103") ? "1" : "0")},
         };
diff --git a/src/solver/batchnorm/backward_per_activation_fused.cpp b/src/solver/batchnorm/backward_per_activation_fused.cpp
index 13a90bd49..980310977 100644
--- a/src/solver/batchnorm/backward_per_activation_fused.cpp
+++ b/src/solver/batchnorm/backward_per_activation_fused.cpp
@@ -166,6 +166,7 @@ ConvSolution BnBwdTrgActivationFused::GetSolution(const FusionContext& context,
             {"MIO_BN_LDSGCN_SIZE", static_cast<int>(ldsgcn)},
             {"MIO_BN_USESAVED", static_cast<int>(true)},
             {"MIO_BN_VARIANT", static_cast<int>(variant)},
+            {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
             {"MIO_BN_GFX103X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx103"))},
             {"MIO_BN_CBA_WRITE_INTERMEDIATE", static_cast<int>(0)},
             {"MIOPEN_YES_ACTIV", static_cast<int>(1)},
diff --git a/src/solver/batchnorm/backward_spatial_multiple.cpp b/src/solver/batchnorm/backward_spatial_multiple.cpp
index 5daed1982..6fd814d4d 100644
--- a/src/solver/batchnorm/backward_spatial_multiple.cpp
+++ b/src/solver/batchnorm/backward_spatial_multiple.cpp
@@ -220,6 +220,7 @@ ConvSolution BnBwdTrainingSpatialMultiple::GetSolution(
             {"MIO_BN_GRP0", xlocalsize},
             {"MIO_BN_GRP1", ylocalsize},
             {"MIO_BN_GRP2", zlocalsize},
+            {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
             {"MIO_BN_GFX103X", (StartsWith(handle.GetDeviceName(), "gfx103") ? "1" : "0")},
             {"MIO_BN_GFX110X", (StartsWith(handle.GetDeviceName(), "gfx110") ? "1" : "0")},
             {"MIO_LAYOUT_NHWC", static_cast<int>(problem.IsLayoutNHWC())},
diff --git a/src/solver/batchnorm/backward_spatial_single.cpp b/src/solver/batchnorm/backward_spatial_single.cpp
index 253abd426..e8057a893 100644
--- a/src/solver/batchnorm/backward_spatial_single.cpp
+++ b/src/solver/batchnorm/backward_spatial_single.cpp
@@ -257,6 +257,7 @@ BnBwdTrainingSpatialSingle::GetSolution(const ExecutionContext& context,
             kernel.kernel_name = "MIOpenBatchNormBwdSpatial";
 
             build_params << KernelBuildParameters{
+                {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
                 {"MIO_BN_GFX110X", (StartsWith(handle.GetDeviceName(), "gfx110") ? "1" : "0")},
                 {"MIO_BN_GFX103X", (StartsWith(handle.GetDeviceName(), "gfx103") ? "1" : "0")},
             };
diff --git a/src/solver/batchnorm/forward_inference.cpp b/src/solver/batchnorm/forward_inference.cpp
index 3a2667330..a5cdbd490 100644
--- a/src/solver/batchnorm/forward_inference.cpp
+++ b/src/solver/batchnorm/forward_inference.cpp
@@ -107,6 +107,7 @@ ConvSolution BnFwdInference::GetSolution(const ExecutionContext& context,
             {"MIO_BN_GRP1", ylocalsize},
             {"MIO_BN_GRP2", zlocalsize},
             {"MIO_BN_GFX110X", (StartsWith(handle.GetDeviceName(), "gfx110") ? "1" : "0")},
+            {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
             {"MIO_BN_GFX103X", (StartsWith(handle.GetDeviceName(), "gfx103") ? "1" : "0")},
         };
 
diff --git a/src/solver/batchnorm/forward_per_activation.cpp b/src/solver/batchnorm/forward_per_activation.cpp
index ac29580bf..2adb6f50e 100644
--- a/src/solver/batchnorm/forward_per_activation.cpp
+++ b/src/solver/batchnorm/forward_per_activation.cpp
@@ -104,6 +104,7 @@ BnFwdTrainingPerActivation::GetSolution(const ExecutionContext& context,
             {"MIO_BN_GRP0", xlocalsize},
             {"MIO_BN_GRP1", ylocalsize},
             {"MIO_BN_GRP2", zlocalsize},
+            {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
             {"MIO_BN_GFX110X", (StartsWith(handle.GetDeviceName(), "gfx110") ? "1" : "0")},
             {"MIO_BN_GFX103X", (StartsWith(handle.GetDeviceName(), "gfx103") ? "1" : "0")},
         };
diff --git a/src/solver/batchnorm/forward_per_activation_fused.cpp b/src/solver/batchnorm/forward_per_activation_fused.cpp
index c74aaca21..bb7c897d6 100644
--- a/src/solver/batchnorm/forward_per_activation_fused.cpp
+++ b/src/solver/batchnorm/forward_per_activation_fused.cpp
@@ -168,6 +168,7 @@ ConvSolution BnFwdTrgActivationFused::GetSolution(const FusionContext& context,
             {"MIO_SAVE_MEAN_VARIANCE", static_cast<int>(saveBatchStats)},
             {"MIO_RUNNING_RESULT", static_cast<int>(savePopStats)},
             {"MIO_BN_VARIANT", static_cast<int>(variant)},
+            {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
             {"MIO_BN_GFX103X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx103"))},
             {"MIOPEN_YES_ACTIV", static_cast<int>(1)},
             {"MIOPEN_NRN_OP_ID", static_cast<int>(activ_op.activMode)},
diff --git a/src/solver/batchnorm/forward_spatial_multiple.cpp b/src/solver/batchnorm/forward_spatial_multiple.cpp
index 00ddf4fcc..53cae2c0f 100644
--- a/src/solver/batchnorm/forward_spatial_multiple.cpp
+++ b/src/solver/batchnorm/forward_spatial_multiple.cpp
@@ -176,6 +176,7 @@ ConvSolution BnFwdTrainingSpatialMultiple::GetSolution(
             {"MIO_BN_GRP0", xlocalsize},
             {"MIO_BN_GRP1", ylocalsize},
             {"MIO_BN_GRP2", zlocalsize},
+            {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
             {"MIO_BN_GFX103X", (StartsWith(handle.GetDeviceName(), "gfx103") ? "1" : "0")},
             {"MIO_BN_GFX110X", (StartsWith(handle.GetDeviceName(), "gfx110") ? "1" : "0")},
             {"MIO_LAYOUT_NHWC", static_cast<int>(problem.IsLayoutNHWC())},
diff --git a/src/solver/batchnorm/forward_spatial_single.cpp b/src/solver/batchnorm/forward_spatial_single.cpp
index 9a5b6b2c0..7618005bd 100644
--- a/src/solver/batchnorm/forward_spatial_single.cpp
+++ b/src/solver/batchnorm/forward_spatial_single.cpp
@@ -210,6 +210,7 @@ BnFwdTrainingSpatialSingle::GetSolution(const ExecutionContext& context,
             {"MIO_BN_GRP0", xlocalsize},
             {"MIO_BN_GRP1", ylocalsize},
             {"MIO_BN_GRP2", zlocalsize},
+            {"MIO_BN_GFX101X", static_cast<int>(StartsWith(handle.GetDeviceName(), "gfx101"))},
             {"MIO_BN_GFX103X", (StartsWith(handle.GetDeviceName(), "gfx103") ? "1" : "0")},
             {"MIO_BN_GFX110X", (StartsWith(handle.GetDeviceName(), "gfx110") ? "1" : "0")},
             {"MIO_LAYOUT_NHWC", static_cast<int>(problem.IsLayoutNHWC())},
diff --git a/test/handle_test.cpp b/test/handle_test.cpp
index 1ab319d6f..1d4d35f43 100644
--- a/test/handle_test.cpp
+++ b/test/handle_test.cpp
@@ -244,6 +244,7 @@ void test_arch_name()
                        "gfx941",
                        "gfx942",
                        "gfx803",
+                       "gfx1010",
                        "gfx1030",
                        "gfx1031",
                        "gfx1100",
-- 
2.41.0

