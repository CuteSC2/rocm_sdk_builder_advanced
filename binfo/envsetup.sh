#!/bin/bash

# Define one or more AMD gpu architectures for the build target.
# Note that the build time will increase when multiple GPU's are selected because various
# parts of code are build for each gpu separately.
#
# NAVI21 selection will add support for the following GPU's
#   - AMD RX 6800/gfx1030
# REMBRAND selection will add support for the following GPU's
#   - AMD m680i mobile gpu available on laptops/gfx1035
# NAVI10 selection will add support for the following GPU's
#   - AMD RX 5700/gfx1010
#
# ---------------ROCM_SDK_BUILDER TARGET AMD GPU Selection ------------
GPU_BUILD_AMD_NAVI10_GFX1010=1
GPU_BUILD_AMD_NAVI21_GFX1030=1
GPU_BUILD_AMD_REMBRANDT_GFX1035=1
# NAVI14 and VEGA support not tested for a while
#GPU_BUILD_AMD_NAVI14_GFX1012=1
#GPU_BUILD_AMD_VEGA_GFX902=1
# ---------------ROCM_SDK_BUILDER TARGET AMD GPU Selection Ends ------------

export ROCM_MAJOR_VERSION=6
export ROCM_MINOR_VERSION=0
export ROCM_PATCH_VERSION=0

SDK_ROOT_DIR="$PWD"

export INSTALL_DIR_PREFIX_SDK_ROOT=/opt/rocm_sdk_${ROCM_MAJOR_VERSION}${ROCM_MINOR_VERSION}${ROCM_PATCH_VERSION}
export ROCM_PATH=${INSTALL_DIR_PREFIX_SDK_ROOT}
export BUILD_RULE_ROOT_DIR=${SDK_ROOT_DIR}/binfo
export ROCM_SDK_VERSION_INFO=rocm-${ROCM_MAJOR_VERSION}.${ROCM_MINOR_VERSION}.${ROCM_PATCH_VERSION}
export UPSTREAM_REPO_VERSION_TAG_DEFAULT=rocm-${ROCM_MAJOR_VERSION}.${ROCM_MINOR_VERSION}.${ROCM_PATCH_VERSION}
export PATCH_FILE_ROOT_DIR=${SDK_ROOT_DIR}/patches/${UPSTREAM_REPO_VERSION_TAG_DEFAULT}
export SDK_SRC_ROOT_DIR=${SDK_ROOT_DIR}/src_projects

if [ -e ${SDK_ROOT_DIR}/envsetup_pre.cfg ]; then
    source ${SDK_ROOT_DIR}/envsetup_pre.cfg
    echo "found ${SDK_ROOT_DIR}/envsetup_pre.cfg"
fi

if [ -e ${BUILD_RULE_ROOT_DIR}/binfo.sh ]; then
    source ${BUILD_RULE_ROOT_DIR}/binfo.sh
else
    echo "error, could not find file binfo.sh to load binfo build file list"
    exit 1
fi

if [ ! -v BUILD_CPU_COUNT_MIN ]; then
    export BUILD_CPU_COUNT_MIN=1
fi
if [ ! -v BUILD_CPU_COUNT_MAX ]; then
    export BUILD_CPU_COUNT_MAX=`nproc`
fi
# use by default total - 4 cpu's for building apps
if [ ! -v BUILD_CPU_COUNT_DEFAULT ]; then
    export BUILD_CPU_COUNT_DEFAULT=`nproc --ignore=4`
fi
if [ ! -v BUILD_CPU_COUNT ]; then
    export BUILD_CPU_COUNT=$BUILD_CPU_COUNT_DEFAULT
fi
# and for the apps consuming lot of resources we use half of the cpu's compared to regular
if [ ! -v BUILD_CPU_COUNT_HALF ]; then
    let BUILD_CPU_COUNT_HALF=$BUILD_CPU_COUNT_MAX/2
    export BUILD_CPU_COUNT_HALF
    #echo "BUILD_CPU_COUNT_HALF: $BUILD_CPU_COUNT_HALF"
fi

#export ROCM_VERSION_STR="${ROCM_MAJOR_VERSION}.${ROCM_MINOR_VERSION}.${ROCM_PATCH_VERSION}"
export ROCM_LIBPATCH_VERSION=${ROCM_MAJOR_VERSION}0${ROCM_MINOR_VERSION}0${ROCM_PATCH_VERSION}
export ROCM_VERSION_STR=${ROCM_MAJOR_VERSION}.${ROCM_MINOR_VERSION}.${ROCM_PATCH_VERSION}
export ROCM_VERSION_STR_ZEROED_NO_DOTS=${ROCM_MAJOR_VERSION}0${ROCM_MINOR_VERSION}0${ROCM_PATCH_VERSION}
export CPACK_RPM_PACKAGE_RELEASE=01

export python=python

GPU_ARCH_NAME_VEGA="vega"
GPU_ARCH_NAME_NAVI10="navi10"
GPU_ARCH_NAME_NAVI14="navi14"
GPU_ARCH_NAME_NAVI21="navi21"
GPU_ARCH_NAME_REMBRANDT="rembrandt"
CMAKE_CFG_GPU_ARCH_VEGA="-DGPU_TARGET_VEGA=1"
CMAKE_CFG_GPU_ARCH_NAVI10="-DGPU_TARGET_NAVI10=1"
CMAKE_CFG_GPU_ARCH_NAVI14="-DGPU_TARGET_NAVI14=1"
CMAKE_CFG_GPU_ARCH_NAVI21="-DGPU_TARGET_NAVI21=1"
CMAKE_CFG_GPU_ARCH_REMBRANDT="-DGPU_TARGET_REMBRANDT=1"

if [ ! -v GPU_ARCH_NAME_DEFAULT ]; then
    GPU_ARCH_NAME_DEFAULT=${GPU_ARCH_NAME_REMBRANDT}
fi

unset SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT
unset SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT
if [[ ! -z ${GPU_BUILD_AMD_VEGA_GFX902} ]]; then
    if [ ! -v CMAKE_CFG_GPU_ARCH_DEFAULT ]; then
        CMAKE_CFG_GPU_ARCH_DEFAULT=${CMAKE_CFG_GPU_ARCH_VEGA}
    fi
    if [ ! -v SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT ]; then
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx902"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx902"
    else
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT} gfx902"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT};gfx902"
    fi
fi
if [[ ! -z ${GPU_BUILD_AMD_NAVI10_GFX1010} ]]; then
    if [ ! -v CMAKE_CFG_GPU_ARCH_DEFAULT ]; then
        CMAKE_CFG_GPU_ARCH_DEFAULT=${CMAKE_CFG_GPU_ARCH_NAVI10}
    fi
    if [ ! -v SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT ]; then
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx1010"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx1010"
    else
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT} gfx1010"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT};gfx1010"
    fi
fi
if [[ ! -z ${GPU_BUILD_AMD_NAVI14_GFX1012} ]]; then
    if [ ! -v CMAKE_CFG_GPU_ARCH_DEFAULT ]; then
        CMAKE_CFG_GPU_ARCH_DEFAULT=${CMAKE_CFG_GPU_ARCH_NAVI14}
    fi
    if [ ! -v SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT ]; then
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx1012"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx1012"
    else
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT} gfx1012"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT};gfx1012"
    fi
fi
if [[ ! -z ${GPU_BUILD_AMD_NAVI21_GFX1030} ]]; then
    if [ ! -v CMAKE_CFG_GPU_ARCH_DEFAULT ]; then
        CMAKE_CFG_GPU_ARCH_DEFAULT=${CMAKE_CFG_GPU_ARCH_NAVI21}
    fi
    if [ ! -v SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT ]; then
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx1030"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx1030"
    else
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT} gfx1030"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT};gfx1030"
    fi
fi
if [[ ! -z ${GPU_BUILD_AMD_REMBRANDT_GFX1035} ]]; then
    if [ ! -v CMAKE_CFG_GPU_ARCH_DEFAULT ]; then
        CMAKE_CFG_GPU_ARCH_DEFAULT=${CMAKE_CFG_GPU_ARCH_REMBRANDT}
    fi
    if [ ! -v SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT ]; then
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx1035"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="gfx1035"
    else
        SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT} gfx1035"
        SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT};gfx1035"
    fi
fi
#SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="${SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT};"

#echo "rocm build targets: "
##echo ${SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT}
#echo ${SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT}
#sleep 2
if [ ! -v SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT ]; then
    echo "GPU_ARCH_BUILD is not defined or value is invalid"
    echo "try to define at least one of following in binfo/envsetup.sh script:"
    echo "    GPU_BUILD_AMD_VEGA_GFX902=1"
    echo "    GPU_BUILD_AMD_NAVI10_GFX1010=1"
    echo "    GPU_BUILD_AMD_NAVI14_GFX1012=1"
    echo "    GPU_BUILD_AMD_NAVI21_GFX1030=1"
    echo "    GPU_BUILD_AMD_REMBRANDT_GFX1035=1"
    exit -1
fi

SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT="$( echo "$SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT" | sed 's/[[:space:]][[:space:]]*/;/g')"
LF_SEPARATED_GPU_TARGET_LIST_DEFAULT="$( echo "$SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT" | sed 's/[[:space:]][[:space:]]*/\n/g')"

#if [ ! -v SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT ]; then
#    read -ra arr <<< "${SPACE_SEPARATED_GPU_TARGET_LIST_DEFAULT}"
#    for a in ${arr[@]}; do
#        echo $a
#        if [ ! -v SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT ]; then
#            SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT=$a
#        else
#            SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT=$SEMICOLON_SEPARATED_GPU_TARGET_LIST_DEFAULT\;$a
#        fi
#    done
#fi

export CMAKE_BUILD_TYPE_DEBUG=Debug
export CMAKE_BUILD_TYPE_RELEASE=Release
export CMAKE_BUILD_TYPE_RELWITHDEBINFO=RelWithDebInfo
#export CMAKE_BUILD_TYPE_DEFAULT=${CMAKE_BUILD_TYPE_RELWITHDEBINFO}
export CMAKE_BUILD_TYPE_DEFAULT=${CMAKE_BUILD_TYPE_RELEASE}
export APP_CMAKE_CFG_FLAGS_DEBUG="-DCMAKE_C_FLAGS_DEBUG=-g3 -DCMAKE_CXX_FLAGS_DEBUG=-g3"
export APP_CMAKE_CFG_FLAGS_DEFAULT=""
if [ ${CMAKE_BUILD_TYPE_DEFAULT} == ${CMAKE_BUILD_TYPE_DEBUG} ] || [ ${CMAKE_BUILD_TYPE_DEFAULT} == ${CMAKE_BUILD_TYPE_RELWITHDEBINFO} ]; then
    APP_CMAKE_CFG_FLAGS_DEFAULT="${APP_CMAKE_CFG_FLAGS_DEBUG}"
    echo "APP_CMAKE_CFG_FLAGS_DEFAULT: $APP_CMAKE_CFG_FLAGS_DEFAULT"
fi
#export INSTALL_DIR_PREFIX_SDK_ROOT=$SDK_ROOT_DIR/install
export BUILD_ROOT_DIR=${SDK_ROOT_DIR}/builddir
#ROCM_DIR is needed at least by the rocminfo
#export ROCM_DIR=${INSTALL_DIR_PREFIX_SDK_ROOT}
export INSTALL_DIR_PREFIX_HIPCC=${INSTALL_DIR_PREFIX_SDK_ROOT}
export INSTALL_DIR_PREFIX_HIP_CLANG=${INSTALL_DIR_PREFIX_SDK_ROOT}
export INSTALL_DIR_PREFIX_HIP_LLVM=${INSTALL_DIR_PREFIX_SDK_ROOT}

export SDK_C_COMPILER_HIPCC=${INSTALL_DIR_PREFIX_HIPCC}/bin/hipcc
export SDK_CXX_COMPILER_HIPCC=${INSTALL_DIR_PREFIX_HIPCC}/bin/hipcc
export SDK_C_COMPILER_HIP_CLANG=${INSTALL_DIR_PREFIX_HIP_LLVM}/bin/clang
export SDK_CXX_COMPILER_HIP_CLANG=${INSTALL_DIR_PREFIX_HIP_LLVM}/bin/clang++

#internal, choose one. SDK_CXX_COMPILER_NAME variable should not be used on any other scripts because
# these 3 names does not match with the names used by rocm for detecting the compiler.
# rocm is using only the following two names: "hcc" or "clang"
SDK_CXX_COMPILER_NAME="hipcc"
#SDK_CXX_COMPILER_NAME="hip_clang"

export SDK_PLATFORM_NAME_HIPCC="amd"
export SDK_PLATFORM_NAME_HIPCLANG="clang"

unset INSTALL_DIR_PREFIX_C_COMPILER

if [ ${SDK_CXX_COMPILER_NAME} == "hipcc" ]; then
    export SDK_C_COMPILER_DEFAULT=${SDK_C_COMPILER_HIPCC}
    export SDK_CXX_COMPILER_DEFAULT=${SDK_CXX_COMPILER_HIPCC}
    export INSTALL_DIR_PREFIX_C_COMPILER=${INSTALL_DIR_PREFIX_HIPCC}
    export HIP_PLATFORM_DEFAULT=${SDK_PLATFORM_NAME_HIPCC}
fi
if [ ${SDK_CXX_COMPILER_NAME} == "hip_clang" ]; then
    export SDK_C_COMPILER_DEFAULT=${SDK_C_COMPILER_HIP_CLANG}
    export SDK_CXX_COMPILER_DEFAULT=${SDK_CXX_COMPILER_HIP_CLANG}
    export INSTALL_DIR_PREFIX_C_COMPILER=${INSTALL_DIR_PREFIX_HIP_CLANG}
    export HIP_PLATFORM_DEFAULT=${SDK_PLATFORM_NAME_HIPCLANG}
fi

if [ -n ${INSTALL_DIR_PREFIX_C_COMPILER} ]; then
    export HIP_PATH_DEFAULT=${INSTALL_DIR_PREFIX_C_COMPILER}
else
    echo "no hip compiler defined"
    exit -1
fi

#HIP_PATH setup to /opt/rocm/hip breaks hipcc on rocm571
#export HIP_PATH=${HIP_PATH_DEFAULT}

export HIP_PLATFORM=${HIP_PLATFORM_DEFAULT}
export HIPCC_VERBOSE=7

export LD_LIBRARY_PATH=/lib64:${INSTALL_DIR_PREFIX_SDK_ROOT}/lib64:${INSTALL_DIR_PREFIX_SDK_ROOT}/lib:${INSTALL_DIR_PREFIX_HIP_LLVM}/lib:${INSTALL_DIR_PREFIX_SDK_ROOT}/hsa/lib
export PATH=${INSTALL_DIR_PREFIX_SDK_ROOT}/bin:${INSTALL_DIR_PREFIX_HIP_LLVM}/bin:${INSTALL_DIR_PREFIX_HIPCC}/bin:$PATH

if [ -e ${SDK_ROOT_DIR}/envsetup_post.cfg ]; then
    echo "Found and executing ${SDK_ROOT_DIR}/envsetup_post.cfg"
    source ${SDK_ROOT_DIR}/envsetup_post.cfg
fi

export HIP_PLATFORM=hcc
export ROCM_DIR=${INSTALL_DIR_PREFIX_SDK_ROOT}
export HCC_HOME=${INSTALL_DIR_PREFIX_SDK_ROOT}/hcc
export HCC_PATH=${HCC_HOME}/bin
export HIP_PATH=${INSTALL_DIR_PREFIX_SDK_ROOT}
export ROCBLAS_HOME=${INSTALL_DIR_PREFIX_SDK_ROOT}/rocblas

export LD_LIBRARY_PATH=${INSTALL_DIR_PREFIX_SDK_ROOT}/lib64:${LD_LIBRARY_PATH}
export LD_LIBRARY_PATH=${INSTALL_DIR_PREFIX_SDK_ROOT}/lib:${LD_LIBRARY_PATH}
export LD_LIBRARY_PATH=${INSTALL_DIR_PREFIX_SDK_ROOT}/hsa/lib:${LD_LIBRARY_PATH}
export LD_LIBRARY_PATH=${ROCBLAS_HOME}/lib:${LD_LIBRARY_PATH}
export LD_LIBRARY_PATH=${HCC_HOME}/lib:${LD_LIBRARY_PATH}

export PATH=${INSTALL_DIR_PREFIX_SDK_ROOT}/hcc/bin:${PATH}
export PATH=${INSTALL_DIR_PREFIX_SDK_ROOT}/bin:${PATH}

export LDFLAGS="-L${INSTALL_DIR_PREFIX_SDK_ROOT}/lib64 -L${INSTALL_DIR_PREFIX_SDK_ROOT}/lib -L${INSTALL_DIR_PREFIX_SDK_ROOT}/hsa/lib -L${ROCBLAS_HOME}/lib -L${HCC_HOME}/lib"
export CFLAGS="-I${INSTALL_DIR_PREFIX_SDK_ROOT}/include -I${INSTALL_DIR_PREFIX_SDK_ROOT}/hsa/include -I${INSTALL_DIR_PREFIX_SDK_ROOT}/rocm_smi/include -I${INSTALL_DIR_PREFIX_SDK_ROOT}/rocblas/include"
export CPPFLAGS="-I${INSTALL_DIR_PREFIX_SDK_ROOT}/include -I${INSTALL_DIR_PREFIX_SDK_ROOT}/hsa/include -I${INSTALL_DIR_PREFIX_SDK_ROOT}/rocm_smi/include -I${INSTALL_DIR_PREFIX_SDK_ROOT}/rocblas/include"
export PKG_CONFIG_PATH="{INSTALL_DIR_PREFIX_SDK_ROOT}/lib64/pkgconfig:{INSTALL_DIR_PREFIX_SDK_ROOT}/lib/pkgconfig:{INSTALL_DIR_PREFIX_SDK_ROOT}/share/pkgconfig"

func_binfo_list_init_app_list

